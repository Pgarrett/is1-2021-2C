

----QUIT----(9 March 2021 14:58:42) CuisUniversity-4532.image priorSource: 13044060!

----STARTUP---- (9 March 2021 14:58:43) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-4532.image!


----QUIT----(9 March 2021 14:58:43) CuisUniversity-4532.image priorSource: 16885479!

----STARTUP---- (25 October 2021 20:34:34) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


----End fileIn of /Users/pgarrett/Documents/facultad/inge1/is1-2021-2C/19-MarsRover-ElRegreso/MarsRover-WithHeading.st----!

TestCase subclass: #MarsRoverReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverReportTest category: 'MarsRover-WithHeading' stamp: 'PhG 10/25/2021 20:50:16'!
TestCase subclass: #MarsRoverReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverReportTest methodsFor: 'nil' stamp: 'PhG 10/25/2021 20:50:53'!
test01! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:53:32'!
test01RoverMovesForwardIsInformedInPositionLog! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:53:50' prior: 50859841!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover new.! !

!methodRemoval: MarsRoverReportTest #test01 stamp: 'PhG 10/25/2021 20:54:03'!
test01!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:54:14' prior: 50859846!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth .! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:54:47' prior: 50859856!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover processCommand: 'ff'.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:55:00' prior: 50859864!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover process: 'ff'.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:55:37' prior: 50859873!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:56:06'!
test01PositionLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover positionLog.! !

!methodRemoval: MarsRoverReportTest #test01RoverMovesForwardIsInformedInPositionLog stamp: 'PhG 10/25/2021 20:56:06'!
test01RoverMovesForwardIsInformedInPositionLog

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover positionLog.!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:56:08'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:56:16'!
positionLog
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:56:24' prior: 50859914!
positionLog
	^OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:56:25'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:56:25'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:56:48'!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:56:50'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:56:57'!
directionLog
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:57:05' prior: 50859943!
directionLog
	^OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:06'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:06'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:06'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:57:21'!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:57:24' prior: 50859963!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:26'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:57:36'!
fullLog
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 20:57:41' prior: 50859985!
fullLog
	^OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:43'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:43'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:43'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 20:57:43'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:58:11'!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:58:22' prior: 50860008!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:58:39' prior: 50860018!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 'f') equals: 	marsRover fullLog.! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 20:58:47'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 20:59:07' prior: 50860029!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 'f') equals: 	marsRover positionLog.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/25/2021 21:00:14'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head commandsExecuted'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/25/2021 21:00:13' prior: 50859525!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	commandsExecuted := OrderedCollection new.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/25/2021 21:00:54'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:00:54' prior: 50860064!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	positionCommandsExecuted := OrderedCollection new.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/25/2021 21:01:06'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/25/2021 21:01:05' prior: 50860081!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	positionCommandsExecuted := OrderedCollection new.
	directionCommandsExecuted := OrderedCollection new.! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:03:14' prior: 50859607!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'PhG 10/25/2021 21:03:24'!
ERROR!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'PhG 10/25/2021 21:03:24'!
ERROR!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'PhG 10/25/2021 21:03:24'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'PhG 10/25/2021 21:03:24'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'PhG 10/25/2021 21:03:24'!
ERROR!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:04:03' prior: 50860109!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:06:14' prior: 50860178!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		^ self rotateRight 
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:07:19' prior: 50860192!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ ^ self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:07:37' prior: 50860045!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	marsRover positionLog.! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:07:48'!
FAILURE!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:08:15' prior: 50859918!
positionLog
	^positionCommandsExecuted.! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:08:19'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:08:19'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:08:19'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:08:19'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:08:19'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:08:56'!
test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:09:07' prior: 50860261!
test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@3) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:09:12' prior: 50860273!
test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'ff'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: 	marsRover positionLog.! !

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice stamp: 'PhG 10/25/2021 21:09:18'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:09:24' prior: 50860285!
test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:09:50'!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:09:54' prior: 50860333!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	marsRover positionLog.! !

!methodRemoval: MarsRoverReportTest #test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice stamp: 'PhG 10/25/2021 21:09:57'!
test05PositionLogContainsForwardEntriesWhenRoverMovesForwardTwice

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@3) equals: 	marsRover positionLog.!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:10:00'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:10:34' prior: 50860206!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^ self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:10:37'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:10:37'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:10:37'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:10:37'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:10:37'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:11:20'!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:11:22' prior: 50860413!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:11:32' prior: 50860425!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:11:38' prior: 50860437!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: 	marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:11:43'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:12:11' prior: 50860376!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: head.
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:16'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:16'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:16'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:12:16'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:12:16'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:12:16'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:12:16'!
FAILURE!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:12:36' prior: 50859947!
directionLog
	^directionCommandsExecuted .! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:12:37' prior: 50860512!
directionLog
	^directionCommandsExecuted.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:55'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:55'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:12:55'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:12:55'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:12:55'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:12:55'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:12:55'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:13:13'!
FAILURE!

self directionLog!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:14:56'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:15:09' prior: 50860449!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: 	marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:15:49' prior: 50860559!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: MarsRoverHeadingEast).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:15:56'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:16:30' prior: 50860571!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: MarsRoverHeadingEast new).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:16:32'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:16:42' prior: 50860589!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: (MarsRoverHeadingEast new)).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:16:43'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:16:50' prior: 50860607!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: #MarsRoverHeadingEast).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:16:51'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:16:56' prior: 50860625!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: MarsRoverHeadingEast).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:17:31' prior: 50860643!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: (MarsRoverHeadingEast for: marsRover)).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:17:33'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:21:04' prior: 50860465!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: (head class).
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^ self rotateLeft ].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:21:10'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:21:21' prior: 50860657!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected :=  (OrderedCollection with: MarsRoverHeadingEast ).
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:21:26' prior: 50860699!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover expected result |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	expected := OrderedCollection with: MarsRoverHeadingEast.
	result :=	marsRover directionLog.
	self assert: expected equals: result.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:21:27'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:21:47' prior: 50860713!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:21:50'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:22:09'!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:22:18' prior: 50860795!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:22:21' prior: 50860808!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:22:22'!
FAILURE!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:22:48' prior: 50860675!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: (head class).
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ 
		self rotateLeft.
		directionCommandsExecuted add: (head class).
		^self.
		].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:22:54'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:24:02'!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:24:07' prior: 50860889!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:24:21' prior: 50860903!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullLog.! !

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:24:23'!
FAILURE!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/25/2021 21:24:46'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/25/2021 21:24:44' prior: 50860099!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	positionCommandsExecuted := OrderedCollection new.
	directionCommandsExecuted := OrderedCollection new.
	allComandsExecuted := OrderedCollection new.! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/25/2021 21:25:14' prior: 50860839!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		positionCommandsExecuted add: position.
		allComandsExecuted add: position.
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		allComandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ 
		self rotateLeft.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^self.
		].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:25:16'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:25:16'!
FAILURE!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:25:16'!
FAILURE!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:25:28' prior: 50859989!
fullLog
	^allComandsExecuted .! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:25:29' prior: 50861021!
fullLog
	^allComandsExecuted.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:25:31'!
PASSED!

----SNAPSHOT----(25 October 2021 21:25:40) CuisUniversity-4532.image priorSource: 16885703!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:26:42'!
test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:27:02' prior: 50861067!
test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover currentPositionStatus.! !

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:27:28'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:27:35'!
currentPositionStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:27:44' prior: 50861095!
currentPositionStatus
	^position.! !

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:28:00'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:28:23'!
test10CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover currentPositionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:28:59'!
test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: 1@2 equals: marsRover currentPositionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:29:14' prior: 50861159!
test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: marsRover currentDirectionStatus.! !

!testRun: #MarsRoverReportTest #test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:29:23'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:29:30'!
currentDirectionStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:29:38' prior: 50861185!
currentDirectionStatus
	^head class.! !

!testRun: #MarsRoverReportTest #test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!

!testRun: #MarsRoverReportTest #test10CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:29:40'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:30:10'!
test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: marsRover currentDirectionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:30:12' prior: 50861247!
test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: MarsRoverHeadingEast equals: marsRover currentDirectionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:30:28' prior: 50861259!
test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover currentDirectionStatus.! !

!methodRemoval: MarsRoverReportTest #test10CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:31:13'!
test10CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover currentPositionStatus.!

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:31:18'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/25/2021 21:31:50' prior: 50861271!
test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover currentFullStatus.! !

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:31:51'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:32:04'!
currentFullStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/25/2021 21:32:19' prior: 50861319!
currentFullStatus
	^OrderedCollection with: position with: (head class).! !

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:32:21'!
PASSED!

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test09CurrentPositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test10CurrentDirectionStatusIsHeadingEastWhenRoverRotatedRight stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

!testRun: #MarsRoverReportTest #test11CurrentFullStatusIsAStepForwardAndHeadingEastWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/25/2021 21:33:03'!
PASSED!

----STARTUP---- (26 October 2021 08:41:42) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!

!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:42:57'!
moveTowards: anOffset
	
	position := position + (0@-1)! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:43:02' prior: 50861440!
moveTowards: anOffset
	
	position := position + anOffset! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:43:31' prior: 50859597!
moveWest
	
	self moveTowards: -1@0.! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:43:38' prior: 50859593!
moveSouth
	
	self moveTowards: 0@-1! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:43:47' prior: 50859589!
moveNorth
	
	self moveTowards: 0@1! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:43:52' prior: 50859581!
moveEast
	
	self moveTowards: 1@0! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'PhG 10/26/2021 08:43:55'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 08:43:58'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:44:23'!
nowHead: newDirection
	
	head := newDirection! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:44:42' prior: 50859543!
headWest
	
	self nowHead: (MarsRoverHeadingWest for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:44:50' prior: 50859539!
headSouth
	
	self nowHead: (MarsRoverHeadingSouth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:44:59' prior: 50859535!
headNorth
	
	self nowHead: (MarsRoverHeadingNorth for: self)! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:45:06' prior: 50859531!
headEast
	
	self nowHead: (MarsRoverHeadingEast for: self)! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 08:45:08'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'PhG 10/26/2021 08:45:10'!
PASSED!
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/26/2021 08:46:17' prior: 50860956!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ 
		self moveForward.
		
		^ self
		].
	(self isBackwardCommand: aCommand) ifTrue: [ 
		self moveBackward.
		positionCommandsExecuted add: position.
		allComandsExecuted add: position.
		^ self
		].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ 
		self rotateLeft.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^self.
		].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 08:46:26' prior: 50861445!
moveTowards: anOffset
	
	position := position + anOffset.
	positionCommandsExecuted add: position.
	allComandsExecuted add: position.! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/26/2021 08:46:54' prior: 50861670!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^		self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ 
		self rotateRight.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^ self.
		].
	(self isRotateLeftCommand: aCommand) ifTrue: [ 
		self rotateLeft.
		directionCommandsExecuted add: (head class).
		allComandsExecuted add: (head class).
		^self.
		].

	self signalInvalidCommand.! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:47:10' prior: 50861555!
nowHead: newDirection
	
	head := newDirection.
	directionCommandsExecuted add: (head class).
	allComandsExecuted add: (head class).! !
!MarsRover methodsFor: 'command processing' stamp: 'PhG 10/26/2021 08:47:32' prior: 50861701!
processCommand: aCommand

	(self isForwardCommand: aCommand) ifTrue: [ ^ self moveForward ].
	(self isBackwardCommand: aCommand) ifTrue: [ ^		self moveBackward ].
	(self isRotateRightCommand: aCommand) ifTrue: [ ^		self rotateRight ].
	(self isRotateLeftCommand: aCommand) ifTrue: [ ^		self rotateLeft ].

	self signalInvalidCommand.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 08:47:39'!
PASSED!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'PhG 10/26/2021 08:47:41'!
PASSED!
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 08:48:11' prior: 50861721!
nowHead: newDirection
	
	head := newDirection.
	"aca van a venir los push"
	directionCommandsExecuted add: (head class).
	allComandsExecuted add: (head class).! !

----QUIT----(26 October 2021 08:56:47) CuisUniversity-4532.image priorSource: 16941200!

----STARTUP---- (26 October 2021 18:30:37) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!

!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:36:32' prior: 50860917!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:37:11'!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:37:16' prior: 50861861!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover positionStatus.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:37:18'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:37:30'!
positionStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:37:44' prior: 50861886!
positionStatus
	^positionCommandsExecuted last.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:37:45'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:38:12'!
test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover positionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:38:28' prior: 50861938!
test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: marsRover directionStatus.! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:38:30'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:38:35'!
directionStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:38:42' prior: 50861964!
directionStatus
	^directionCommandsExecuted last.! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:38:43'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:39:14'!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: marsRover directionStatus.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:39:36' prior: 50862021!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullStatus.! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:39:38'!
ERROR!
!MarsRover methodsFor: '*DenotativeObject' stamp: 'PhG 10/26/2021 18:39:42'!
fullStatus
	self shouldBeImplemented.! !
!MarsRover methodsFor: '*DenotativeObject' stamp: 'PhG 10/26/2021 18:39:59' prior: 50862052!
fullStatus
	^OrderedCollection with: positionCommandsExecuted last with: directionCommandsExecuted last.! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:40:00'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:42:02' prior: 50859892!
test01PositionLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectPositions.
	
	self assert: OrderedCollection new equals: 	marsRover positionLog.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:42:04'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:42:45'!
collectPositions
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:42:56' prior: 50862132!
collectPositions
	positionCommandsExecuted := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:42:59'!
PASSED!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/26/2021 18:43:14' prior: 50860945!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:43:39' prior: 50859930!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectHeading.
	
	self assert: OrderedCollection new equals: 	marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:43:41'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:43:48' prior: 50862202!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectHeadings.
	
	self assert: OrderedCollection new equals: 	marsRover directionLog.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:43:51'!
ERROR!
!MarsRover methodsFor: 'accessing' stamp: 'PhG 10/26/2021 18:43:55'!
collectHeadings
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'accessing' stamp: 'PhG 10/26/2021 18:44:07' prior: 50862231!
collectHeadings
	directionCommandsExecuted := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:44:09'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:44:09'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:44:09'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:44:09'!
FAILURE!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:44:09'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:44:46' prior: 50859973!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectAll.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:44:49'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:45:03' prior: 50862295!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectAllLogs.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:45:05'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:45:11'!
collectAllLogs
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:45:32' prior: 50862322!
collectAllLogs
	allComandsExecuted := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:45:33'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:45:33'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:45:33'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 18:45:33'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 18:45:33'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 18:45:34'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:45:53' prior: 50860222!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectPositions.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:45:58' prior: 50860346!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectPositions.
	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:46:14' prior: 50860755!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectHeadings.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:46:18' prior: 50860821!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectHeadings.
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:46:27' prior: 50861848!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectAllLogs.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 18:46:48' prior: 50861872!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectPositionStatus.
	marsRover process: 'f'.
	
	self assert: 1@2 equals: marsRover positionStatus.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:46:50'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:47:04'!
collectPositionStatus
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 18:48:20'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted positionStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:48:18' prior: 50862467!
collectPositionStatus
	positionStatus := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:48:23'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 18:49:16' prior: 50861693!
moveTowards: anOffset
	
	position := position + anOffset.
	positionCommandsExecuted ifNotNil: [positionCommandsExecuted add: position].
	allComandsExecuted ifNotNil: [allComandsExecuted add: position].
	positionStatus ifNotNil: [positionStatus add: position].! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:49:18'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 18:49:34' prior: 50861890!
positionStatus
	^positionStatus last.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 18:49:35'!
FAILURE!

----QUIT----(26 October 2021 18:51:04) CuisUniversity-4532.image priorSource: 16966050!

----STARTUP---- (26 October 2021 19:06:43) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:07:17'!
ERROR!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:07:17'!
ERROR!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:07:17'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:07:17'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:07:17'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:07:17'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:07:26'!
ERROR!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:07:31'!
ERROR!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:07:35'!
ERROR!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:07:39'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:07:43'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:08:19' prior: 50861949!
test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectDirectionStatus.
	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: marsRover directionStatus.! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:08:21'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:08:29'!
collectDirectionStatus
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:08:48'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted positionStatus directionStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:08:46' prior: 50862614!
collectDirectionStatus
	directionStatus := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:08:50'!
ERROR!
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 19:09:53' prior: 50861832!
nowHead: newDirection
	
	head := newDirection.
	directionCommandsExecuted ifNotNil: [directionCommandsExecuted add: (head class)].
	allComandsExecuted ifNotNil: [allComandsExecuted add: (head class)].
	directionStatus ifNotNil: [directionStatus add: (head class)].! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:09:55'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:10:06' prior: 50861968!
directionStatus
	^directionStatus last.! !

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:10:07'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:10:07'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:10:07'!
ERROR!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:10:25'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:10:39' prior: 50862057!
fullStatus
	^OrderedCollection with: positionStatus last with: directionStatus last.! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:10:40'!
ERROR!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:11:08' prior: 50862034!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	marsRover collectFullStatus.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: marsRover fullStatus.! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:11:12'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:11:18'!
collectFullStatus
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:11:30'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted positionStatus directionStatus fullStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:11:27' prior: 50862756!
collectFullStatus
	fullStatus := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:11:31'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:11:40' prior: 50862725!
fullStatus
	^fullStatus .! !

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:11:43'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 19:12:29' prior: 50862492!
moveTowards: anOffset
	
	position := position + anOffset.
	positionCommandsExecuted ifNotNil: [positionCommandsExecuted add: position].
	allComandsExecuted ifNotNil: [allComandsExecuted add: position].
	positionStatus ifNotNil: [positionStatus add: position].
	fullStatus ifNotNil: [fullStatus add: position].! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 19:12:46' prior: 50862640!
nowHead: newDirection
	
	head := newDirection.
	directionCommandsExecuted ifNotNil: [directionCommandsExecuted add: (head class)].
	allComandsExecuted ifNotNil: [allComandsExecuted add: (head class)].
	directionStatus ifNotNil: [directionStatus add: (head class)].
	fullStatus ifNotNil: [fullStatus add: (head class)].! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:12:49'!
PASSED!

----SNAPSHOT----(26 October 2021 19:13:01) CuisUniversity-4532.image priorSource: 16987704!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:13:35'!
PASSED!

Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:38:47'!
Object subclass: #Log
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'nil' stamp: 'PhG 10/26/2021 19:43:00' overrides: 16881312!
update: aChange! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:43:42'!
Object subclass: #Log
	instanceVariableNames: 'updates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:43:39' prior: 50862929 overrides: 16881312!
update: anUpdate
	updates add: anUpdate.! !
!Log methodsFor: 'nil' stamp: 'PhG 10/26/2021 19:43:59' overrides: 16896425!
initialize
	updates := OrderedCollection new.! !
!Log methodsFor: 'nil' stamp: 'PhG 10/26/2021 19:44:33' overrides: 16882188!
print
	^updates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:45:04' prior: 50862949 overrides: 16882188!
print
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:47:57' prior: 50862384!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover x |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x := Log new.
	marsRover notifyPositionsChangesTo: x.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	marsRover positionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:48:09' prior: 50862960!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover x |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	x := Log new.
	marsRover notifyPositionsChangesTo: x.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	x print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:48:20' prior: 50862973!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	positionLogger print.! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:48:26'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:48:37'!
notifyPositionsChangesTo: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:49:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted positionStatus directionStatus fullStatus positionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:49:22' prior: 50863004!
notifyPositionsChangesTo: aPositionSubscriber
	positionSubscribers add: aPositionSubscriber.! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:49:27'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/26/2021 19:49:51' prior: 50862195!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	positionSubscribers := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:49:56'!
FAILURE!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:49:56'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:49:56'!
FAILURE!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:50:06'!
FAILURE!
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 19:50:49' prior: 50862791!
moveTowards: anOffset
	
	position := position + anOffset.
	positionSubscribers do: [:aPositionSusbscriber | aPositionSusbscriber update: position].
	positionCommandsExecuted ifNotNil: [positionCommandsExecuted add: position].
	allComandsExecuted ifNotNil: [allComandsExecuted add: position].
	positionStatus ifNotNil: [positionStatus add: position].
	fullStatus ifNotNil: [fullStatus add: position].! !
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 19:50:58' prior: 50863098!
moveTowards: anOffset
	
	position := position + anOffset.
	positionSubscribers do: [:aPositionSusbscriber | aPositionSusbscriber update: position].
	allComandsExecuted ifNotNil: [allComandsExecuted add: position].
	positionStatus ifNotNil: [positionStatus add: position].
	fullStatus ifNotNil: [fullStatus add: position].! !

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:51:03'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:51:03'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:51:03'!
FAILURE!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:51:18'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:51:18'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:51:18'!
FAILURE!

positionLogger print!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:55:18'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:55:23'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:55:23'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:55:23'!
FAILURE!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:55:35'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:55:35'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:55:35'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:56:09' prior: 50862397!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	positionLogger print.! !

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:56:13'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:56:14'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:56:38' prior: 50862119!
test01PositionLogIsEmptyWhenRoverDidNotMove

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	
	self assert: OrderedCollection new equals: 	positionLogger print.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:56:40'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:57:00' prior: 50862411!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyDirectionChangesTo: positionLogger.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: marsRover directionLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:57:07' prior: 50863503!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyDirectionChangesTo: positionLogger.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: positionLogger print.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:57:09'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:57:18'!
notifyDirectionChangesTo: aLog 
	self shouldBeImplemented.! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 19:57:41'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionCommandsExecuted directionCommandsExecuted allComandsExecuted positionStatus directionStatus fullStatus positionSubscribers directionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 19:57:39' prior: 50863536!
notifyDirectionChangesTo: aDirectionSubscriber 
	directionSubscribers add: aDirectionSubscriber! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:57:44'!
ERROR!
!MarsRover methodsFor: 'initialization' stamp: 'PhG 10/26/2021 19:58:02' prior: 50863032!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self.
	positionSubscribers := OrderedCollection new.
	directionSubscribers := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:58:08'!
FAILURE!
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 19:58:52' prior: 50862804!
nowHead: newDirection
	
	head := newDirection.
	directionSubscribers do: [:aDirectionSusbscriber | aDirectionSusbscriber update: (head class)].
	allComandsExecuted ifNotNil: [allComandsExecuted add: (head class)].
	directionStatus ifNotNil: [directionStatus add: (head class)].
	fullStatus ifNotNil: [fullStatus add: (head class)].! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:58:58'!
FAILURE!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:58:58'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:58:58'!
FAILURE!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:59:22' prior: 50862424!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyDirectionChangesTo: positionLogger.
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: positionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:59:32' prior: 50863646!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: directionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 19:59:37' prior: 50863518!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: directionLogger print.! !

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:59:39'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 19:59:43'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:00:07' prior: 50862217!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	marsRover collectHeadings.
	
	self assert: OrderedCollection new equals: 	directionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:00:17' prior: 50863751!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	
	self assert: OrderedCollection new equals: 	directionLogger print.! !

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:00:17'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:00:17'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:00:17'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:00:17'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:00:18'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:01:14' prior: 50862438!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allChangesLogger print.! !

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:01:18'!
ERROR!
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 20:01:25'!
notifyAllChangesTo: aLog 
	self shouldBeImplemented.! !
!MarsRover methodsFor: 'report' stamp: 'PhG 10/26/2021 20:02:11' prior: 50863849!
notifyAllChangesTo: aSubscriber 
	self notifyPositionsChangesTo: aSubscriber.
	self notifyDirectionChangesTo: aSubscriber.! !

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:02:13'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:02:41' prior: 50862309!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	
	self assert: OrderedCollection new equals: 	marsRover fullLog.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:02:46' prior: 50863916!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	
	self assert: OrderedCollection new equals: 	allChangesLogger print.! !

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:02:48'!
PASSED!

!methodRemoval: MarsRover #collectAllLogs stamp: 'PhG 10/26/2021 20:02:57'!
collectAllLogs
	allComandsExecuted := OrderedCollection new.!

!methodRemoval: MarsRover #collectHeadings stamp: 'PhG 10/26/2021 20:03:06'!
collectHeadings
	directionCommandsExecuted := OrderedCollection new.!

!methodRemoval: MarsRover #collectPositions stamp: 'PhG 10/26/2021 20:03:10'!
collectPositions
	positionCommandsExecuted := OrderedCollection new.!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:03:26'!
PASSED!

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionStatus directionStatus fullStatus positionSubscribers directionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:03:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionStatus directionStatus fullStatus positionSubscribers directionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:03:45'!
PASSED!

Object subclass: #Status
	instanceVariableNames: 'update'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #Status category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:05:29'!
Object subclass: #Status
	instanceVariableNames: 'update'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Status methodsFor: 'nil' stamp: 'PhG 10/26/2021 20:05:49' overrides: 16882188!
print
	^update copy! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:06:01' overrides: 16881312!
update: anUpdate
	update := anUpdate! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:06:02' prior: 50864139 overrides: 16881312!
update: anUpdate
	update := anUpdate.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:07:00' prior: 50862452!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover positionStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionStatus := Status new.
	marsRover notifyPositionsChangesTo: positionStatus.
	marsRover process: 'f'.
	
	self assert: 1@2 equals: positionStatus print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:07:32' prior: 50862598!
test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight

	| marsRover directionStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionStatus := Status new.
	marsRover notifyDirectionChangesTo: directionStatus.
	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: directionStatus print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:08:31' prior: 50862737!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover allStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allStatus := Status new.
	marsRover notifyAllChangesTo: allStatus.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allStatus print.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:09:53'!
updatePosition: aPositionUpdate
	update := aPositionUpdate.! !

!classDefinition: #Status category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:10:00'!
Object subclass: #Status
	instanceVariableNames: 'update positionUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:09:59' prior: 50864193!
updatePosition: aPositionUpdate
	positionUpdate := aPositionUpdate.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:14' prior: 50864163!
test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight

	| marsRover directionStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionStatus := Status new.
	marsRover notifyDirectionChangesTo: directionStatus.
	marsRover process: 'r'.
	
	self assert: MarsRoverHeadingEast equals: directionStatus printDirection.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:22'!
printAll
	^update copy! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:25'!
printPosition
	^update copy! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56'!
printDirection
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56'!
printDirection
	^update copy! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863367!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	positionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50862986!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	positionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863437!
test01PositionLogIsEmptyWhenRoverDidNotMove

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	
	self assert: OrderedCollection new equals: 	positionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50864149!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover positionStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionStatus := Status new.
	marsRover notifyPositionsChangesTo: positionStatus.
	marsRover process: 'f'.
	
	self assert: 1@2 equals: positionStatus printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863678!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: directionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863662!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: directionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863828!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allChangesLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863762!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	
	self assert: OrderedCollection new equals: 	directionLogger printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50864178!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover allStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allStatus := Status new.
	marsRover notifyAllChangesTo: allStatus.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allStatus printDirection.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:12:56' prior: 50863929!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	
	self assert: OrderedCollection new equals: 	allChangesLogger printDirection.! !

!methodRemoval: Log #print stamp: 'PhG 10/26/2021 20:12:56'!
print
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.!

!methodRemoval: Status #print stamp: 'PhG 10/26/2021 20:12:56'!
print
	^update copy!
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:03' prior: 50864230!
printPosition
	^positionUpdate copy! !

!classDefinition: #Status category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:13:10'!
Object subclass: #Status
	instanceVariableNames: 'directionUpdate positionUpdate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:10' prior: 50864240!
printDirection
	^directionUpdate copy! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:10' prior: 50864226!
printAll
	^directionUpdate copy! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:10' prior: 50864144 overrides: 16881312!
update: anUpdate
	directionUpdate := anUpdate.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:25' prior: 50864419!
printAll
	^OrderedCollection with: positionUpdate with: directionUpdate .! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:25' prior: 50864429!
printAll
	^OrderedCollection with: positionUpdate with: directionUpdate.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:13:49' prior: 50864365!
test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward

	| marsRover allStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allStatus := Status new.
	marsRover notifyAllChangesTo: allStatus.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allStatus printAll.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:14:00' prior: 50864289!
test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward

	| marsRover positionStatus |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionStatus := Status new.
	marsRover notifyPositionsChangesTo: positionStatus.
	marsRover process: 'f'.
	
	self assert: 1@2 equals: positionStatus printPosition.! !

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:14:01'!
FAILURE!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:14:46'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:14:46'!
FAILURE!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:14:46'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:14:46'!
FAILURE!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:14:57'!
FAILURE!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:16:16'!
updateDirection: anUpdate
	updates add: anUpdate.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:16:16'!
updateDirection: anUpdate
	directionUpdate := anUpdate.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:16:16' prior: 50863114!
moveTowards: anOffset
	
	position := position + anOffset.
	positionSubscribers do: [:aPositionSusbscriber | aPositionSusbscriber updateDirection: position].
	allComandsExecuted ifNotNil: [allComandsExecuted add: position].
	positionStatus ifNotNil: [positionStatus add: position].
	fullStatus ifNotNil: [fullStatus add: position].! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:16:16' prior: 50863578!
nowHead: newDirection
	
	head := newDirection.
	directionSubscribers do: [:aDirectionSusbscriber | aDirectionSusbscriber updateDirection: (head class)].
	allComandsExecuted ifNotNil: [allComandsExecuted add: (head class)].
	directionStatus ifNotNil: [directionStatus add: (head class)].
	fullStatus ifNotNil: [fullStatus add: (head class)].! !

!methodRemoval: Log #update: stamp: 'PhG 10/26/2021 20:16:16'!
update: anUpdate
	updates add: anUpdate.!

!methodRemoval: Status #update: stamp: 'PhG 10/26/2021 20:16:16'!
update: anUpdate
	directionUpdate := anUpdate.!
!MarsRover methodsFor: 'moving' stamp: 'PhG 10/26/2021 20:16:34' prior: 50864539!
moveTowards: anOffset
	
	position := position + anOffset.
	positionSubscribers do: [:aPositionSusbscriber | aPositionSusbscriber updatePosition: position].! !
!MarsRover methodsFor: 'heading' stamp: 'PhG 10/26/2021 20:16:42' prior: 50864553!
nowHead: newDirection
	
	head := newDirection.
	directionSubscribers do: [:aDirectionSusbscriber | aDirectionSusbscriber updateDirection: (head class)].! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:16:44'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:16:45'!
ERROR!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:16:45'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:16:45'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:16:45'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:16:45'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:16:56' prior: 50864261!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	positionLogger printPosition.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:17:07' prior: 50864245!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	positionLogger printPosition.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:17:12' prior: 50864335!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allChangesLogger printAll.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'PhG 10/26/2021 20:17:32'!
PASSED!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:17:34'!
ERROR!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:17:34'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:17:34'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:17:34'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:17:34'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:17:51'!
printPosition
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:17:55'!
printAll
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:12'!
updatePosition: anUpdate
	updates add: anUpdate.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:18:24'!
Object subclass: #Log
	instanceVariableNames: 'updates positionUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:23' prior: 50864803!
updatePosition: anUpdate
	positionUpdates add: anUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:31' prior: 50864816!
updatePosition: aPositionUpdate
	positionUpdates add: aPositionUpdate.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:18:40'!
Object subclass: #Log
	instanceVariableNames: 'directionUpdates positionUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:40' prior: 50864791!
printPosition
	"Usamos esto para no tener que assertear sobre los streams"
	^directionUpdates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:40' prior: 50862945 overrides: 16896425!
initialize
	directionUpdates := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:40' prior: 50864234!
printDirection
	"Usamos esto para no tener que assertear sobre los streams"
	^directionUpdates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:40' prior: 50864529!
updateDirection: anUpdate
	directionUpdates add: anUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:40' prior: 50864797!
printAll
	"Usamos esto para no tener que assertear sobre los streams"
	^directionUpdates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:46' prior: 50864854!
updateDirection: aDirectionUpdate
	directionUpdates add: aDirectionUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:18:55' prior: 50864842 overrides: 16896425!
initialize
	positionUpdates := OrderedCollection new.
	directionUpdates := OrderedCollection new.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:18:59'!
FAILURE!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:18:59'!
FAILURE!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:18:59'!
FAILURE!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:18:59'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:18:59'!
PASSED!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:52' overrides: 16881312!
update: anUpdate
	directionUpdates add: anUpdate.! !

!classDefinition: #Log category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:19:57'!
Object subclass: #Log
	instanceVariableNames: 'updates positionUpdates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864927 overrides: 16881312!
update: anUpdate
	updates add: anUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864835!
printPosition
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864871 overrides: 16896425!
initialize
	positionUpdates := OrderedCollection new.
	updates := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864847!
printDirection
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864865!
updateDirection: aDirectionUpdate
	updates add: aDirectionUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:19:57' prior: 50864859!
printAll
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !

!methodRemoval: Log #updateDirection: stamp: 'PhG 10/26/2021 20:20:04'!
updateDirection: aDirectionUpdate
	updates add: aDirectionUpdate.!

!methodRemoval: Log #updatePosition: stamp: 'PhG 10/26/2021 20:20:06'!
updatePosition: aPositionUpdate
	positionUpdates add: aPositionUpdate.!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:20:12' overrides: 16882188!
print
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.! !

!methodRemoval: Log #printAll stamp: 'PhG 10/26/2021 20:20:14'!
printAll
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.!

!methodRemoval: Log #printDirection stamp: 'PhG 10/26/2021 20:20:16'!
printDirection
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.!

!methodRemoval: Log #printPosition stamp: 'PhG 10/26/2021 20:20:18'!
printPosition
	"Usamos esto para no tener que assertear sobre los streams"
	^updates copy.!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:20:21' prior: 50864952 overrides: 16896425!
initialize
	updates := OrderedCollection new.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:20:42'!
updateDirection: anUpdate
	updates add: anUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:20:52'!
updatePosition: anUpdate
	updates add: anUpdate.! !

!methodRemoval: Log #update: stamp: 'PhG 10/26/2021 20:20:52'!
update: anUpdate
	updates add: anUpdate.!
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:20:58' prior: 50865014!
updatePosition: aPositionUpdate
	updates add: aPositionUpdate.! !
!Log methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:21:05' prior: 50865010!
updateDirection: aDirectionUpdate
	updates add: aDirectionUpdate.! !

!methodRemoval: MarsRover #collectDirectionStatus stamp: 'PhG 10/26/2021 20:21:19'!
collectDirectionStatus
	directionStatus := OrderedCollection new.!

!methodRemoval: MarsRover #collectFullStatus stamp: 'PhG 10/26/2021 20:21:20'!
collectFullStatus
	fullStatus := OrderedCollection new.!

!methodRemoval: MarsRover #collectPositionStatus stamp: 'PhG 10/26/2021 20:21:22'!
collectPositionStatus
	positionStatus := OrderedCollection new.!

!methodRemoval: MarsRover #directionLog stamp: 'PhG 10/26/2021 20:21:28'!
directionLog
	^directionCommandsExecuted.!

!methodRemoval: MarsRover #directionStatus stamp: 'PhG 10/26/2021 20:21:29'!
directionStatus
	^directionStatus last.!

!methodRemoval: MarsRover #fullLog stamp: 'PhG 10/26/2021 20:21:31'!
fullLog
	^allComandsExecuted.!

!methodRemoval: MarsRover #fullStatus stamp: 'PhG 10/26/2021 20:21:32'!
fullStatus
	^fullStatus .!

!methodRemoval: MarsRover #positionLog stamp: 'PhG 10/26/2021 20:21:38'!
positionLog
	^positionCommandsExecuted.!

!methodRemoval: MarsRover #positionStatus stamp: 'PhG 10/26/2021 20:21:41'!
positionStatus
	^positionStatus last.!

Object subclass: #MarsRover
	instanceVariableNames: 'position head positionSubscribers directionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'PhG 10/26/2021 20:21:50'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head positionSubscribers directionSubscribers'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:21:54'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:21:54'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:21:54'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:21:54'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:02' prior: 50864276!
test01PositionLogIsEmptyWhenRoverDidNotMove

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	
	self assert: OrderedCollection new equals: 	positionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:08' prior: 50864352!
test02DirectionLogIsEmptyWhenRoverDidNotMove

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	
	self assert: OrderedCollection new equals: 	directionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:12' prior: 50864381!
test03FullLogIsEmptyWhenRoverDidNotMove

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	
	self assert: OrderedCollection new equals: 	allChangesLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:16' prior: 50864640!
test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.
	
	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'f'.
	
	self assert: (OrderedCollection with: 1@2) equals: 	positionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:21' prior: 50864655!
test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards

	| marsRover positionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	positionLogger := Log new.
	marsRover notifyPositionsChangesTo: positionLogger.
	marsRover process: 'fb'.
	
	self assert: (OrderedCollection with: 1@2 with: 1@1) equals: 	positionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:28' prior: 50864303!
test06DirectionLogContainsEastEntryWhenRoverRotatedRight

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'r'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast) equals: directionLogger print.! !
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:35' prior: 50864318!
test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft

	| marsRover directionLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	directionLogger := Log new.
	marsRover notifyDirectionChangesTo: directionLogger.
	marsRover process: 'rl'.
	
	self assert: (OrderedCollection with: MarsRoverHeadingEast with: MarsRoverHeadingNorth) equals: directionLogger print.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:22:37'!
ERROR!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:22:37'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:22:37'!
PASSED!
!MarsRoverReportTest methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:22:44' prior: 50864671!
test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight

	| marsRover allChangesLogger |
	
	marsRover := MarsRover at: 1@1 heading: MarsRoverHeadingNorth.

	allChangesLogger := Log new.
	marsRover notifyAllChangesTo: allChangesLogger.
	marsRover process: 'fr'.
	
	self assert: (OrderedCollection with: 1@2 with: MarsRoverHeadingEast) equals: allChangesLogger print.! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:46'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:22:47'!
FAILURE!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:22:47'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:22:47'!
FAILURE!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:23:25'!
FAILURE!
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:24:00' prior: 50864534!
updateDirection: aDirectionUpdate
	directionUpdate := aDirectionUpdate.! !
!Status methodsFor: 'as yet unclassified' stamp: 'PhG 10/26/2021 20:24:19' prior: 50864414!
printDirection
	^directionUpdate! !

!testRun: #MarsRoverReportTest #test01PositionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test02DirectionLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test03FullLogIsEmptyWhenRoverDidNotMove stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test04PositionLogContainsForwardEntryWhenRoverMovesForwardOnce stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test05PositionLogContainsForwardAndBackwardEntriesWhenRoverMovedForwardAndBackwards stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test06DirectionLogContainsEastEntryWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test07DirectionLogContainsEastAndNorthEntriesWhenRoverRotatedRightAndLeft stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test08FullLogContainsNewForwardPositionAndRotatedEastEntriesWhenRoverMovedForwardAndRotatedRight stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test09PositionStatusContainsNewForwardPositionWhenRoverMovedForward stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test10DirectionStatusContainsEastAsNewDirectionPositionWhenRoverRotatedRight stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

!testRun: #MarsRoverReportTest #test11FullStatusContainsEastAsNewDirectionAndNewForwardPositionWhenRoverRotatedRightAndMovedForward stamp: 'PhG 10/26/2021 20:24:21'!
PASSED!

----SNAPSHOT----(26 October 2021 20:26:25) CuisUniversity-4532.image priorSource: 16998887!

----QUIT----(26 October 2021 21:22:05) CuisUniversity-4532.image priorSource: 17080521!

----STARTUP---- (30 October 2021 08:46:41) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


----End fileIn of /Users/pgarrett/Documents/facultad/inge1/is1-2021-2C/20-TusLibros/TusLibros.st----!

----End fileIn of /Users/pgarrett/Documents/facultad/inge1/parcial/soluciones-catedra/ISW1-2021-2C-1erParcial.st----!

----End fileIn of /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/Packages/TerseGuide.pck.st----!

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 10/30/2021 09:04:30'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 10/30/2021 09:04:30'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 10/30/2021 09:04:30'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 10/30/2021 09:04:30'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 10/30/2021 09:04:30'!
PASSED!
!Catalogue methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:04:59' prior: 50865571!
contains: aBookToSearch
	^listOfBooksInCatalogue includes: aBookToSearch.
"	^ (listOfBooksInCatalogue select: [:aBook| aBook = aBookToSearch ]) notEmpty ."! !

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 10/30/2021 09:05:02'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 10/30/2021 09:05:02'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 10/30/2021 09:05:02'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 10/30/2021 09:05:02'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 10/30/2021 09:05:02'!
PASSED!
!Catalogue methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:05:12' prior: 50869185!
contains: aBookToSearch
	^listOfBooksInCatalogue includes: aBookToSearch.! !

!classDefinition: #Catalogue category: 'TusLibros' stamp: 'PhG 10/30/2021 09:05:26'!
Object subclass: #Catalogue
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Catalogue methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:05:26' prior: 50865562!
initializeWithBook: aBook
	self initialize .
	books add: aBook .! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:05:26' prior: 50865557 overrides: 16896425!
initialize
	books _ OrderedCollection new.! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:05:26' prior: 50869209!
contains: aBookToSearch
	^books includes: aBookToSearch.! !
!Catalogue methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:05:26' prior: 50865567!
with: aBook
	books add: aBook .! !
!Catalogue methodsFor: 'initialization' stamp: 'PhG 10/30/2021 09:05:40' prior: 50869222!
initializeWithBook: aBook
	self initialize.
	books add: aBook.! !
!Catalogue methodsFor: 'initialization' stamp: 'PhG 10/30/2021 09:05:53' prior: 50869238!
with: aBook
	books add: aBook.! !
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:07:29' prior: 50865513!
contains: aBookToSearch 
	^books includes: aBookToSearch.! !
!Cart methodsFor: 'nil' stamp: 'PhG 10/30/2021 09:08:42'!
assertBookIsInCatalogue
! !
!Cart methodsFor: 'operation' stamp: 'PhG 10/30/2021 09:09:07' prior: 50865506!
addBook: aBook 
	
	self assertBookIsInCatalogue: aBook
	
	books add: aBook.! !
!Cart methodsFor: 'operation' stamp: 'PhG 10/30/2021 09:09:16' prior: 50869259!
addBook: aBook 
	
	self assertBookIsInCatalogue: aBook.
	
	books add: aBook.! !
!Cart methodsFor: 'assertions' stamp: 'PhG 10/30/2021 09:09:29'!
assertBookIsInCatalogue: aBook
	(catalogue contains: aBook) ifFalse: [ ^self error: self class canNotAddBookNotInCatalogue.].! !

!methodRemoval: Cart #assertBookIsInCatalogue stamp: 'PhG 10/30/2021 09:09:32'!
assertBookIsInCatalogue
!
!Cart methodsFor: 'assertions' stamp: 'PhG 10/30/2021 09:10:26'!
signalBookNotInCatalogue
	^self error: self class canNotAddBookNotInCatalogue! !
!Cart methodsFor: 'assertions' stamp: 'PhG 10/30/2021 09:10:46' prior: 50869269!
assertBookIsInCatalogue: aBook
	(catalogue contains: aBook) ifFalse: [ self signalBookNotInCatalogue].! !
!Cart methodsFor: 'exceptions' stamp: 'PhG 10/30/2021 09:11:17' prior: 50869279!
signalBookNotInCatalogue
	
	self error: self class canNotAddBookNotInCatalogue! !
!Cart methodsFor: 'assertions' stamp: 'PhG 10/30/2021 09:11:25' prior: 50869285!
assertBookIsInCatalogue: aBook
	(catalogue contains: aBook) ifFalse: [ self signalBookNotInCatalogue ].! !
!Cart methodsFor: 'assertions' stamp: 'PhG 10/30/2021 09:12:11' prior: 50869297!
assertBookIsInCatalogue: aBook
	
	(catalogue contains: aBook) ifFalse: [ self signalBookNotInCatalogue ].! !
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:12:22' prior: 50869251!
contains: aBookToSearch 

	^books includes: aBookToSearch.! !
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:12:26' prior: 50865519!
isEmpty

	^books isEmpty .! !
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:12:29' prior: 50865522!
quantityOfBook: aBook

	^(books select: [ :aBookInCart | aBookInCart = aBook]) size .! !
!Cart methodsFor: 'initialization' stamp: 'PhG 10/30/2021 09:12:41' prior: 50865501!
initializeWithCatalogue: aCatalogo

	catalogue _ aCatalogo.
	books _ OrderedCollection new.! !
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:13:48' prior: 50869318!
quantityOfBook: aBook

	^books occurrencesOf: aBook.
	"^(books select: [ :aBookInCart | aBookInCart = aBook]) size ."! !

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 10/30/2021 09:13:50'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 10/30/2021 09:13:50'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 10/30/2021 09:13:50'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 10/30/2021 09:13:50'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 10/30/2021 09:13:50'!
PASSED!
!Cart methodsFor: 'testing' stamp: 'PhG 10/30/2021 09:13:56' prior: 50869330!
quantityOfBook: aBook

	^books occurrencesOf: aBook.! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'PhG 10/30/2021 09:14:55'!
Object subclass: #Cart
	instanceVariableNames: 'booksInCart catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:14:55' prior: 50869324!
initializeWithCatalogue: aCatalogo

	catalogue _ aCatalogo.
	booksInCart _ OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:14:55' prior: 50869314!
isEmpty

	^booksInCart isEmpty .! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:14:55' prior: 50869309!
contains: aBookToSearch 

	^booksInCart includes: aBookToSearch.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:14:55' prior: 50869264!
addBook: aBook 
	
	self assertBookIsInCatalogue: aBook.
	
	booksInCart add: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 10/30/2021 09:14:55' prior: 50869353!
quantityOfBook: aBook

	^booksInCart occurrencesOf: aBook.! !
!Cart methodsFor: 'initialization' stamp: 'PhG 10/30/2021 09:15:09' prior: 50869365!
initializeWithCatalogue: aCatalogue

	catalogue _ aCatalogue.
	booksInCart _ OrderedCollection new.! !

----SNAPSHOT----(30 October 2021 09:15:35) CuisUniversity-4532.image priorSource: 17080614!

----QUIT----(30 October 2021 11:52:17) CuisUniversity-4532.image priorSource: 17207878!

----STARTUP---- (30 October 2021 12:01:47) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


----QUIT----(30 October 2021 12:02:00) CuisUniversity-4532.image priorSource: 17207971!

----STARTUP---- (1 November 2021 17:04:57) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


!classRemoval: #Catalogue stamp: 'PhG 11/1/2021 17:05:13'!
Object subclass: #Catalogue
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'PhG 11/1/2021 17:05:14'!
Object subclass: #Cart
	instanceVariableNames: 'booksInCart catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestsCart stamp: 'PhG 11/1/2021 17:05:14'!
TestCase subclass: #TestsCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #ResidentialZone stamp: 'PhG 11/1/2021 17:05:17'!
Zone subclass: #ResidentialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #IndustrialZone stamp: 'PhG 11/1/2021 17:05:17'!
Zone subclass: #IndustrialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CommertialZone stamp: 'PhG 11/1/2021 17:05:18'!
Zone subclass: #CommertialZone
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Zone stamp: 'PhG 11/1/2021 17:05:18'!
Object subclass: #Zone
	instanceVariableNames: 'numberOfCells'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #Service stamp: 'PhG 11/1/2021 17:05:19'!
Object subclass: #Service
	instanceVariableNames: 'waterProduced energyProduced'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #City stamp: 'PhG 11/1/2021 17:05:20'!
Object subclass: #City
	instanceVariableNames: 'zones services'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

!classRemoval: #CityTest stamp: 'PhG 11/1/2021 17:05:21'!
TestCase subclass: #CityTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2021-2C-1erParcial'!

----End fileIn of /Users/pgarrett/Documents/facultad/inge1/is1-2021-2C/20-TusLibros/TusLibros.st----!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:07:58' prior: 50869487!
test01ANewCartShouldBeEmpty
	
	|cart|
	
	cart _ Cart withCatalogue: (OrderedCollection new).
	
	self assert: cart isEmpty.! !

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 11/1/2021 17:08:06'!
PASSED!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:09:00' prior: 50869494!
test02ACartWithABookIsNotEmpty

	|cart book catalogue|

	book _ '1234'.
	catalogue _ OrderedCollection with: book.	
	cart _ Cart withCatalogue: catalogue .

	cart addBook: book.

	self deny: cart isEmpty.! !

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 11/1/2021 17:09:01'!
PASSED!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:09:15' prior: 50869504!
test03ACartWithABookShouldContainIt

	|cart book|
	book _ '1234'.
	cart _ Cart withCatalogue: (OrderedCollection with: book).
	
	cart addBook: book.
	
	self assert: (cart contains: book).! !

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 11/1/2021 17:09:19'!
PASSED!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:18:15' prior: 50869631!
test02ACartWithABookIsNotEmpty

	|cart book catalogue|

	book _ 1234.
	catalogue _ OrderedCollection with: book.	
	cart _ Cart withCatalogue: catalogue .

	cart addBook: book.

	self deny: cart isEmpty.! !

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 11/1/2021 17:18:16'!
PASSED!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:18:22' prior: 50869688!
test02ACartWithABookIsNotEmpty

	|cart book catalogue|

	book _ '1234'.
	catalogue _ OrderedCollection with: book.	
	cart _ Cart withCatalogue: catalogue .

	cart addBook: book.

	self deny: cart isEmpty.! !
!Cart methodsFor: 'initialization' stamp: 'PhG 11/1/2021 17:28:10' prior: 50869550!
initializeWithCatalogue: aCatalogue

	catalogue _ aCatalogue.
	booksInCart _ Bag new.! !

!testRun: #TestsCart #test01ANewCartShouldBeEmpty stamp: 'PhG 11/1/2021 17:28:13'!
PASSED!

!testRun: #TestsCart #test02ACartWithABookIsNotEmpty stamp: 'PhG 11/1/2021 17:28:13'!
PASSED!

!testRun: #TestsCart #test03ACartWithABookShouldContainIt stamp: 'PhG 11/1/2021 17:28:13'!
PASSED!

!testRun: #TestsCart #test04AddingABookNotInCatalogueToAcartShouldThrowError stamp: 'PhG 11/1/2021 17:28:13'!
PASSED!

!testRun: #TestsCart #test05ACartCanHaveMultipleCopiesOfTheSameBook stamp: 'PhG 11/1/2021 17:28:13'!
PASSED!

!classDefinition: #Cart category: 'TusLibros' stamp: 'PhG 11/1/2021 17:31:49'!
Object subclass: #Cart
	instanceVariableNames: 'products catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:31:49' prior: 50869727!
initializeWithCatalogue: aCatalogue

	catalogue _ aCatalogue.
	products _ Bag new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:31:49' prior: 50869566!
isEmpty

	^products isEmpty .! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:31:49' prior: 50869561!
contains: aBookToSearch 

	^products includes: aBookToSearch.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:31:49' prior: 50869556!
addBook: aBook 
	
	self assertBookIsInCatalogue: aBook.
	
	products add: aBook.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:31:49' prior: 50869570!
quantityOfBook: aBook

	^products occurrencesOf: aBook.! !
!Cart methodsFor: 'adding books' stamp: 'PhG 11/1/2021 17:31:56' prior: 50869771!
addBook: aProduct 
	
	self assertBookIsInCatalogue: aProduct.
	
	products add: aProduct.! !
!Cart methodsFor: 'adding books' stamp: 'PhG 11/1/2021 17:35:08'!
addProduct: aProduct 
	
	self assertBookIsInCatalogue: aProduct.
	
	products add: aProduct.! !
!TestsCart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:35:08' prior: 50869528!
test05ACartCanHaveMultipleCopiesOfTheSameBook

	|cart book catalogue|
	
	book _'1234'.
	catalogue _ OrderedCollection with: book.
	cart _ Cart withCatalogue: catalogue.
	cart addProduct: book.
	cart addProduct: book.
	
	self assert: 2 equals: (cart quantityOfBook: book).! !
!TestsCart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:35:08' prior: 50869660!
test03ACartWithABookShouldContainIt

	|cart book|
	book _ '1234'.
	cart _ Cart withCatalogue: (OrderedCollection with: book).
	
	cart addProduct: book.
	
	self assert: (cart contains: book).! !
!TestsCart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:35:08' prior: 50869513!
test04AddingABookNotInCatalogueToAcartShouldThrowError

	|cart book catalogue |
	
	book _'1234'.
	catalogue _ OrderedCollection new.
	cart _ Cart withCatalogue: catalogue.
	
	self 
		should: [ cart addProduct: book.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart canNotAddBookNotInCatalogue equals: anError messageText.
			self assert: true equals: cart isEmpty .]! !
!TestsCart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 17:35:08' prior: 50869717!
test02ACartWithABookIsNotEmpty

	|cart book catalogue|

	book _ '1234'.
	catalogue _ OrderedCollection with: book.	
	cart _ Cart withCatalogue: catalogue .

	cart addProduct: book.

	self deny: cart isEmpty.! !

!methodRemoval: Cart #addBook: stamp: 'PhG 11/1/2021 17:35:08'!
addBook: aProduct 
	
	self assertBookIsInCatalogue: aProduct.
	
	products add: aProduct.!
!TestsCart methodsFor: 'tests carritos' stamp: 'PhG 11/1/2021 17:57:51' prior: 50869814!
test04AddingABookNotInCatalogueToAcartShouldThrowError

	|cart book catalogue |
	
	book _'1234'.
	catalogue _ OrderedCollection new.
	cart _ Cart withCatalogue: catalogue.
	
	self 
		should: [ cart addProduct: book.]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: Cart canNotAddBookNotInCatalogue equals: anError messageText.
			self assert: cart isEmpty .]! !

!classRemoval: #Cart stamp: 'PhG 11/1/2021 19:19:31'!
Object subclass: #Cart
	instanceVariableNames: 'products catalogue'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #TestsCart stamp: 'PhG 11/1/2021 19:19:31'!
TestCase subclass: #TestsCart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of /Users/pgarrett/Documents/facultad/inge1/is1-2021-2C/20-TusLibros/iteracion2/TusLibros.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'PhG 11/1/2021 19:21:06'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'no messages' stamp: 'PhG 11/1/2021 19:22:24'!
test01checkoutOnEmptyCartThrowsError! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 19:22:40' prior: 50870067!
test01checkoutOnEmptyCartThrowsError

	| cart |
	
	cart := Cart new.! !
!CashierTest methodsFor: 'nil' stamp: 'PhG 11/1/2021 19:23:40'!
createCart! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:24:03' prior: 50870077!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'PhG 11/1/2021 19:25:40'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:25:33' prior: 50870072!
test01checkoutOnEmptyCartThrowsError

	| cart cashier |
	
	cart := Cart new.
	
	cashier := Cashier new.
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:25:56' prior: 50870093!
test01checkoutOnEmptyCartThrowsError

	| cart cashier |
	
	cart := self createCart.
	
	cashier := Cashier new.
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:26:55' prior: 50870100!
test01checkoutOnEmptyCartThrowsError

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmpty. ]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:26:58'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:27:13'!
defaultCatalog
	self shouldBeImplemented.! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:27:23' prior: 50870121!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:27:31'!
itemSellByTheStore
	
	^ 'validBook'! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:27:35'!
ERROR!
!Cashier methodsFor: 'error descriptions' stamp: 'PhG 11/1/2021 19:27:53'!
cartCanNotBeEmpty
	self shouldBeImplemented.! !
!Cashier methodsFor: 'error messages' stamp: 'PhG 11/1/2021 19:28:29' prior: 50870137!
cartCanNotBeEmpty

	^'Cart can not be empty'! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:28:30'!
FAILURE!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:28:31'!
FAILURE!
!Cashier methodsFor: 'nil' stamp: 'PhG 11/1/2021 19:28:46'!
checkout: aCart! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:29:12' prior: 50870152!
checkout: aCart
	self error! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:29:36' prior: 50870156!
checkout: aCart
	self error: self cartCanNotBeEmpty.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:29:38'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:30:23'!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmpty. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:30:56' prior: 50870168!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmpty. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:31:29' prior: 50870180!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	cart add: self itemSellByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:32:09'!
defaultPriceList
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:32:22' prior: 50870204!
defaultPriceList
	
	^ Dictionary with: self itemSellByTheStore! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:33:23' prior: 50870209!
defaultPriceList
	
	^ Dictionary at: self itemSellByTheStore put: 100! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:33:32' prior: 50870081!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:33:50'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:34:42' prior: 50870214!
defaultPriceList
	
	^ Dictionary add: (self itemSellByTheStore)-> 100! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:34:44'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:34:44'!
ERROR!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:34:49'!
ERROR!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 19:35:27' prior: 50870227!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSellByTheStore)-> 100.
	^priceList.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:35:31'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:35:31'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:31'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:31'!
ERROR!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:35:42'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:42'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:42'!
ERROR!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:35:45'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:45'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:45'!
ERROR!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:35:50'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:50'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:35:50'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:36:01'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'PhG 11/1/2021 19:37:21' prior: 50869892!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:37:23'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:37:52' prior: 50870160!
checkout: aCart
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty]! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:38:13' prior: 50870309!
checkout: aCart
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty]
	! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:40:17' prior: 50870315!
checkout: aCart
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty]
	
	aCart items do: []! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:40:23' prior: 50870321!
checkout: aCart
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	aCart items do: []! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:41:16' prior: 50870327!
checkout: aCart
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	aCart items do: [].! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'PhG 11/1/2021 19:43:28'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:43:25' prior: 50870333!
checkout: aCart

	| total |
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	aCart items do: [:anItem | priceList get: anItem].
	
	^total! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:43:42' prior: 50870346!
checkout: aCart

	| total |
	
	total := 0.
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	aCart items do: [:anItem | priceList get: anItem].
	
	^total! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:44:08' prior: 50870354!
checkout: aCart

	| total |
	
	total := 0.
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	total := aCart items sum: [:anItem | priceList get: anItem].
	
	^total! !

!classDefinition: #Cart category: 'TusLibros' stamp: 'PhG 11/1/2021 19:47:11'!
Object subclass: #Cart
	instanceVariableNames: 'priceList items'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 19:47:11' prior: 50869905!
initializeAcceptingItemsOf: aCatalog

	priceList := aCatalog.
	items := OrderedCollection new.! !
!Cart methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 19:47:11' prior: 50870299!
assertIsValidItem: anItem

	(priceList includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !
!Cart methodsFor: 'initialization' stamp: 'PhG 11/1/2021 19:47:17' prior: 50870378!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList.
	items := OrderedCollection new.! !
!Cashier methodsFor: 'nil' stamp: 'PhG 11/1/2021 19:47:28'!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList.! !
!Cashier class methodsFor: 'nil' stamp: 'PhG 11/1/2021 19:47:45'!
acceptingItemsOf: aCatalog

	^self new initializeAcceptingItemsOf: aCatalog ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/1/2021 19:48:04' prior: 50870402!
acceptingItemsOf: aPriceList

	^self new initializeAcceptingItemsOf: aPriceList ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/1/2021 19:48:20' prior: 50870408!
acceptingItemsOf: aPriceList

	"testear que ningun precio sea negativo o 0"

	^self new initializeAcceptingItemsOf: aPriceList ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/1/2021 19:48:26' prior: 50870414!
acceptingItemsOf: aPriceList

	"testear que todo precio sea positivo"

	^self new initializeAcceptingItemsOf: aPriceList ! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:48:52' prior: 50870194!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self defaultPriceList .
	
	cart add: self itemSellByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 19:48:53' prior: 50870429!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self defaultPriceList.
	
	cart add: self itemSellByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:48:54'!
ERROR!
!Cart methodsFor: 'queries' stamp: 'PhG 11/1/2021 19:49:07'!
items
	^items .! !
!Cart methodsFor: 'queries' stamp: 'PhG 11/1/2021 19:49:08' prior: 50870454!
items
	^items.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:49:11'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:49:11'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:49:11'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/1/2021 19:50:15' prior: 50870362!
checkout: aCart

	| total |
	
	total := 0.
	
	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	total := aCart items sum: [:anItem | priceList at: anItem].
	
	^total! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 19:50:17'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 19:50:17'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 20:06:24'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 20:06:24'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 20:06:24'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/1/2021 20:06:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/1/2021 20:06:29'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/1/2021 20:06:29'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/1/2021 20:06:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/1/2021 20:06:29'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/1/2021 20:06:29'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/1/2021 20:06:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/1/2021 20:06:29'!
ERROR!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/1/2021 20:06:37'!
ERROR!
!CartTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:06:51'!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSellByTheStore)-> 100.
	^priceList.! !
!CartTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:06:57' prior: 50870039!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/1/2021 20:06:58'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 20:07:00'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 20:07:00'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:08:23'!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self defaultPriceList.
	
	cart add: self itemSellByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !

!methodRemoval: CashierTest #defaultCatalog stamp: 'PhG 11/1/2021 20:08:31'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:08:43'!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSellByTheStore)-> 100.
	^priceList.! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:09:00' prior: 50870585!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSellByTheStore)-> 100.
	priceList add: (self otherItemSoldByTheStore)-> 100.
	^priceList.! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:09:09'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:09:09'!
itemSoldByTheStore
	
	^ 'validBook'! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50869985!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart occurrencesOf: self itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870027!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByTheStore.
	self assert: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870044!
defaultCatalog
	
	^ Array with: self itemSoldByTheStore! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50869959!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCart.
	
	self 
		should: [cart add: 0 of: self itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870526!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	^priceList.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870242!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	^priceList.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870592!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	priceList add: (self otherItemSoldByTheStore)-> 100.
	^priceList.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870440!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self defaultPriceList.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870570!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self defaultPriceList.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50870007!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCart.
	
	self deny: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/1/2021 20:09:09' prior: 50869999!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCart.
	
	cart add: self itemSoldByTheStore.
	self deny: cart isEmpty ! !

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'PhG 11/1/2021 20:09:09'!
itemSellByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemSellByTheStore stamp: 'PhG 11/1/2021 20:09:09'!
itemSellByTheStore
	
	^ 'validBook'!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:09:20'!
otherItemSoldByTheStore
	
	^ 'otherValidBook'! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:09:25' prior: 50870662!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	priceList add: (self otherItemSoldByTheStore)-> 60.
	^priceList.! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:09:33' prior: 50870683!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems .
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:09:35' prior: 50870732!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:09:45' prior: 50870744!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCart with: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/1/2021 20:10:07'!
createCartWith: aPriceList
	
	^Cart acceptingItemsOf: aPriceList! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:10:20' prior: 50870756!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:10:35' prior: 50870773!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:10:38' prior: 50870786!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self assert: 160 equals: (cashier checkout: cart)
	! !

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/1/2021 20:10:39'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/1/2021 20:10:39'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/1/2021 20:10:39'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/1/2021 20:10:39'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:11:21'!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self assert: 160 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:16:26' prior: 50870828!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	today := Date today.
	
	self assert: 160 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:17:03' prior: 50870842!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	today := Date today.
	
	self assert: 160 equals: (cashier checkout: cart withCardExpirationDate: (today))
	! !

Date today!

(Date today) - 2!

(Date today) - GregorianMonth new!

Date today!

FixedGregorianDate !

(FixedGregorianDate today ) - (FixedGregorianDate yesterday )!

dateToday := FixedGregorianDate today.!

dateToday previous: dateToday twoMonths.!

(FixedGregorianDate yearNumber: 2004 monthNumber: 1 dayNumber: 1) previous: (TimeUnits week with: 1)!

(FixedGregorianDate today) previous: (TimeUnits week with: 1)!

(FixedGregorianDate today) previous: (TimeUnits month with: 1) !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/1/2021 20:31:41' prior: 50870857!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier today expiredDate |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier acceptingItemsOf: self priceListwithTwoItems.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	today := FixedGregorianDate today.
	
	expiredDate := today previous: (TimeUnits month with: 1).
	
	self assert: 160 equals: (cashier checkout: cart withCardExpirationDate: expiredDate)
	! !

----QUIT----(2 November 2021 07:56:59) CuisUniversity-4532.image priorSource: 17208191!

----STARTUP---- (2 November 2021 17:05:34) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!


TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'PhG 11/2/2021 17:06:37'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'PhG 11/2/2021 17:08:52'!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/2/2021 17:09:26' prior: 50870924!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '0123456789'
	
	

	! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'PhG 11/2/2021 17:10:46'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/2/2021 17:10:39' prior: 50870930!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '0123456789'	

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/2/2021 17:10:57' prior: 50870944!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '0123456789'	.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:10:59'!
ERROR!
!CreditCard class methodsFor: '*DenotativeObject' stamp: 'PhG 11/2/2021 17:11:08'!
creditCardMustContain16Digits
	self shouldBeImplemented.! !
!CreditCard class methodsFor: '*DenotativeObject' stamp: 'PhG 11/2/2021 17:11:20' prior: 50870973!
creditCardMustContain16Digits
	^'A credit card must contain 16 digits'! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:11:22'!
FAILURE!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:11:48'!
FAILURE!
!CreditCard class methodsFor: 'nil' stamp: 'PhG 11/2/2021 17:12:48'!
withNumber: aCardNumber

	aCardNumber size < 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits].! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:13:12'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:13:12'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:13:20'!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '0123456789'	.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:13:31' prior: 50871005!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '01234567890123456789'	.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:13:33'!
FAILURE!
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:13:45' prior: 50870991!
withNumber: aCardNumber

	aCardNumber size ~= 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits].! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:13:47'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:13:47'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:14:30'!
test02CreditCardWithExpirationDateInTheFutureIsNotExpired

	| cardNumber |
	
	cardNumber := '01234567890123456789'	.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:16:01' prior: 50871048!
test02CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	creditCard := CreditCard withNumber: '0123456789123456'	.
	
	today := FixedGregorianDate today.
	
	self deny: (creditCard isExpiredOn: today).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:16:36' prior: 50871061!
test02CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := FixedGregorianDate today.
	
	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: today.
	
	self deny: (creditCard isExpiredOn: today).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:16:58'!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := FixedGregorianDate today.
	
	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: today.
	
	self deny: (creditCard isExpiredOn: today).! !

!methodRemoval: CreditCardTest #test02CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:16:58'!
test02CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := FixedGregorianDate today.
	
	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: today.
	
	self deny: (creditCard isExpiredOn: today).!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:17:17' prior: 50871082!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := GregorianMonthOfYear today.
	
	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: today.
	
	self deny: (creditCard isExpiredOn: today).! !

GregorianMonthOfYear!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:18:25' prior: 50871105!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := GregorianMonthOfYear current.
	
	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: (today nex).
	
	self deny: (creditCard isExpiredOn: today).! !

today := GregorianMonthOfYear current.!

today := GregorianMonthOfYear current.

jan := today next: 2!

today := GregorianMonthOfYear current.

jan := today next: (today twoMonths)!

today := GregorianMonthOfYear current.

today twoMonths!

today := GregorianMonthOfYear current.

today next: (TimeUnits month with: 2)!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:22:49' prior: 50871117!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard today |
	
	today := GregorianMonthOfYear current.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: (today next: (TimeUnits month with: 2)).
	
	self deny: (creditCard isExpiredOn: today).! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:22:51'!
ERROR!
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:23:02'!
withNumber: aString withExpirationDate: aGregorianMonthOfYear 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWithNumber: aString withExpirationDate: aGregorianMonthOfYear ! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:23:46' prior: 50871154!
withNumber: aCardNumber withExpirationDate: anExpirationDate 

	aCardNumber size ~= 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:24:45' prior: 50871165!
withNumber: aCardNumber withExpirationDate: anExpirationDate 

	aCardNumber size ~= 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits].
	
	(anExpirationDate isKindOf: GregorianMonthOfYear) ifFalse: [self error: CreditCard creditCardMustContain16Digits].! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:25:43' prior: 50871173!
withNumber: aCardNumber withExpirationDate: anExpirationDate 

	aCardNumber size ~= 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits].
	
	^self basicNew initializeWith: aCardNumber withExpirationDate: anExpirationDate.! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:26:09'!
assertCardNumberIs16DigitsLong: aCardNumber

	^ aCardNumber size ~= 16 ifTrue: [self error: CreditCard creditCardMustContain16Digits]! !
!CreditCard class methodsFor: 'instance creation' stamp: 'PhG 11/2/2021 17:26:09' prior: 50871185!
withNumber: aCardNumber withExpirationDate: anExpirationDate 

	self assertCardNumberIs16DigitsLong: aCardNumber.
	
	^self basicNew initializeWith: aCardNumber withExpirationDate: anExpirationDate.! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:26:27'!
ERROR!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'PhG 11/2/2021 17:26:52'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'PhG 11/2/2021 17:26:53'!
Object subclass: #CreditCard
	instanceVariableNames: 'cardNumber expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'initialization' stamp: 'PhG 11/2/2021 17:26:53'!
initializeWith: aCardNumber withExpirationDate: anExpirationDate 
	self shouldBeImplemented.
	cardNumber := aCardNumber.
	expirationDate := anExpirationDate.! !
!CreditCard methodsFor: 'initialization' stamp: 'PhG 11/2/2021 17:26:57' prior: 50871231!
initializeWith: aCardNumber withExpirationDate: anExpirationDate 
	
	cardNumber := aCardNumber.
	expirationDate := anExpirationDate.! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:27:00'!
ERROR!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:27:11'!
isExpiredOn: aGregorianMonthOfYear 
	self shouldBeImplemented.! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:27:14' prior: 50871250!
isExpiredOn: aGregorianMonthOfYear 
	^false! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:27:14' prior: 50871255!
isExpiredOn: aGregorianMonthOfYear 
	^false.! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:27:16'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:27:16'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:27:16'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:27:16'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:27:44'!
test04CreditCardWithExpirationDateInThePastIsExpired

	| creditCard today |
	
	today := GregorianMonthOfYear current.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: (today next: (TimeUnits month with: 2)).
	
	self deny: (creditCard isExpiredOn: today).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:27:56' prior: 50871138!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear |
	
	currentMonthOfYear := GregorianMonthOfYear current.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: (currentMonthOfYear next: (TimeUnits month with: 2)).
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:28:42' prior: 50871292!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := GregorianMonthOfYear current.
	twoMonthsToTheFuture := (currentMonthOfYear next: (TimeUnits month with: 2)).

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture .
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:28:43' prior: 50871306!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := GregorianMonthOfYear current.
	twoMonthsToTheFuture := (currentMonthOfYear next: (TimeUnits month with: 2)).

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:28:44'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:28:44'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:28:44'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:28:44'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:28:44'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:28:54' prior: 50871280!
test04CreditCardWithExpirationDateInThePastIsExpired

	| creditCard today |
	
	today := GregorianMonthOfYear current.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: (today next: (TimeUnits month with: 2)).
	
	self assert: (creditCard isExpiredOn: today).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:29:34' prior: 50871358!
test04CreditCardWithExpirationDateInThePastIsExpired

	| creditCard currentMonthOfYear twoMonthsToThePast |
	
	currentMonthOfYear := GregorianMonthOfYear current.
	twoMonthsToThePast := (currentMonthOfYear previous: (TimeUnits month with: 2)).

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToThePast.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:29:34'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:29:52' prior: 50871260!
isExpiredOn: aDate 
	^false.! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:30:05' prior: 50871390!
isExpiredOn: aDate 
	^expirationDate < aDate.! !

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:30:10'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:30:10'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:30:10'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:30:10'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:30:10'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:30:30'!
test05CreditCardWithExpirationDateInThePresentIsNotExpired

	| creditCard currentMonthOfYear |
	
	currentMonthOfYear := GregorianMonthOfYear current.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: currentMonthOfYear.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:30:34'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:33:25' prior: 50871394!
isExpiredOn: aDate 
	^(expirationDate < aDate) and: [expirationDate ~= aDate].! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:33:29'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:33:29'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:33:29'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:33:29'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:33:29'!
FAILURE!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:33:29'!
FAILURE!

(expirationDate < aDate) or: [expirationDate ~= aDate].!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:34:05'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:34:17' prior: 50871435!
isExpiredOn: aDate 
	^(expirationDate < aDate) or: [expirationDate ~= aDate].! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:34:18'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:34:18'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:34:18'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:34:18'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:34:18'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:34:28' prior: 50871470!
isExpiredOn: aDate 
	^(expirationDate < aDate) and: [expirationDate ~= aDate].! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:34:33' prior: 50871495!
isExpiredOn: aDate 
	^(expirationDate < aDate) and: [expirationDate = aDate].! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:34:38' prior: 50871501!
isExpiredOn: aDate 
	^(expirationDate < aDate) and: [expirationDate ~= aDate].! !
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:34:56' prior: 50871507!
isExpiredOn: aDate 
	^(expirationDate < aDate) or: [(expirationDate = aDate) not].! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:34:58'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:34:58'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:34:58'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:34:58'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:34:58'!
FAILURE!
!CreditCard methodsFor: 'testing' stamp: 'PhG 11/2/2021 17:43:27' prior: 50871513!
isExpiredOn: aDate 
	^((aDate < expirationDate) and: (expirationDate ~= aDate)) not.! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:43:30'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:43:30'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:43:30'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:43:30'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:43:30'!
PASSED!
!CreditCardTest methodsFor: 'nil' stamp: 'PhG 11/2/2021 17:44:19'!
currentMonthOfYear

	^GregorianMonthOfYear current.! !
!CreditCardTest methodsFor: 'dates' stamp: 'PhG 11/2/2021 17:44:55'!
twoMonthsFrom: aMonthOfYear

	^GregorianMonthOfYear current.! !
!CreditCardTest methodsFor: 'dates' stamp: 'PhG 11/2/2021 17:44:57'!
twoMonthsSince: aMonthOfYear

	^GregorianMonthOfYear current.! !
!CreditCardTest methodsFor: 'dates' stamp: 'PhG 11/2/2021 17:45:22' prior: 50871572!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).! !
!CreditCardTest methodsFor: 'dates' stamp: 'PhG 11/2/2021 17:45:33' prior: 50871567!
twoMonthsFrom: aMonthOfYear

	^aMonthOfYear next: (TimeUnits month with: 2).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:45:48' prior: 50871418!
test05CreditCardWithExpirationDateInThePresentIsNotExpired

	| creditCard currentMonthOfYear |
	
	currentMonthOfYear := self currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: currentMonthOfYear.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:46:08' prior: 50871370!
test04CreditCardWithExpirationDateInThePastIsExpired

	| creditCard currentMonthOfYear twoMonthsToThePast |
	
	currentMonthOfYear := self currentMonthOfYear.
	twoMonthsToThePast := self twoMonthsSince: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToThePast.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:46:21' prior: 50871322!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := self currentMonthOfYear.
	twoMonthsToTheFuture := self twoMonthsSince: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:46:47' prior: 50871017!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated

	| cardNumber currentMonthOfYear twoMonthsToTheFuture |
	
	cardNumber := '01234567890123456789'	.
	currentMonthOfYear := self currentMonthOfYear.
	twoMonthsToTheFuture := self twoMonthsSince: currentMonthOfYear.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:47:21' prior: 50871632!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated

	| cardNumber currentMonthOfYear twoMonthsToTheFuture |
	
	cardNumber := '01234567890123456789'	.
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.

	self 
		should: [CreditCard withNumber: cardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:47:25' prior: 50871649!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated

	| cardNumber twoMonthsToTheFuture |
	
	cardNumber := '01234567890123456789'	.
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.

	self 
		should: [CreditCard withNumber: cardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:47:36' prior: 50870957!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber twoMonthsToTheFuture |
	
	cardNumber := '0123456789'	.
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.

	self 
		should: [CreditCard withNumber: cardNumber ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:47:44' prior: 50871683!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber twoMonthsToTheFuture |
	
	cardNumber := '0123456789'	.
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.

	self 
		should: [CreditCard withNumber: cardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'nil' stamp: 'PhG 11/2/2021 17:49:11'!
assertCreditCardMustContain16DigitsForCardNumber: aCardNumber! !
!CreditCardTest methodsFor: 'assertions' stamp: 'PhG 11/2/2021 17:49:56' prior: 50871714!
assertCreditCardMustContain16DigitsForCardNumber: aCardNumber

	| twoMonthsToTheFuture |
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.! !
!CreditCardTest methodsFor: 'assertions' stamp: 'PhG 11/2/2021 17:50:14' prior: 50871719!
assertCreditCardMustContain16DigitsForCardNumber: aCardNumber

	| twoMonthsToTheFuture |
	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.
	
	self 
		should: [CreditCard withNumber: aCardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'assertions' stamp: 'PhG 11/2/2021 17:50:20' prior: 50871727!
assertCreditCardMustContain16DigitsForCardNumber: aCardNumber

	| twoMonthsToTheFuture |

	twoMonthsToTheFuture := self twoMonthsSince: self currentMonthOfYear.
	
	self 
		should: [CreditCard withNumber: aCardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:50:42' prior: 50871698!
test01CreditCardWithLessThan16DigitsCanNotBeInstantiated

	| cardNumber |
	
	cardNumber := '0123456789'	.

	self assertCreditCardMustContain16DigitsForCardNumber: cardNumber.! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:50:50'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:50:50'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:50:50'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:50:50'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:50:50'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:50:50'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:50:50'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:51:07' prior: 50871666!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated
| cardNumber |
	
	cardNumber := '01234567890123456789'	.

	self assertCreditCardMustContain16DigitsForCardNumber: cardNumber.! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:51:11' prior: 50871793!
test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated
	
	| cardNumber |
	
	cardNumber := '01234567890123456789'	.

	self assertCreditCardMustContain16DigitsForCardNumber: cardNumber.! !

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:51:12'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:51:12'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:51:12'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:51:12'!
FAILURE!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:51:12'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:51:12'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:51:12'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:51:34'!
FAILURE!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:51:54'!
FAILURE!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:52:16' prior: 50871617!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := self currentMonthOfYear.
	twoMonthsToTheFuture := self twoMonthsFrom: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:52:23'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 17:52:23'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 17:52:23'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 17:52:23'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 17:52:23'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/2/2021 17:53:32' prior: 50870671!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier |
	
	cart := self createCart.
	cashier := Cashier new.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/2/2021 17:53:38' prior: 50870800!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier new.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self assert: 160 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/2/2021 17:53:44' prior: 50870888!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier today expiredDate |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier new.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	today := FixedGregorianDate today.
	
	expiredDate := today previous: (TimeUnits month with: 1).
	
	self assert: 160 equals: (cashier checkout: cart withCardExpirationDate: expiredDate)
	! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/2/2021 17:53:49'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 17:53:49'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/2/2021 17:53:49'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 17:53:49'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 17:53:53'!
ERROR!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 17:54:04'!
PASSED!

!methodRemoval: Cashier class #acceptingItemsOf: stamp: 'PhG 11/2/2021 17:54:40'!
acceptingItemsOf: aPriceList

	"testear que todo precio sea positivo"

	^self new initializeAcceptingItemsOf: aPriceList !

!methodRemoval: Cashier #initializeAcceptingItemsOf: stamp: 'PhG 11/2/2021 17:55:00'!
initializeAcceptingItemsOf: aPriceList

	priceList := aPriceList.!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/2/2021 17:55:28' prior: 50870471!
checkout: aCart

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	^aCart total.! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/2/2021 17:55:43' prior: 50871977!
checkout: aCart

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	^aCart totalPrice.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/2/2021 17:55:48'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 17:55:48'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/2/2021 17:55:48'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 17:55:48'!
ERROR!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 17:55:50'!
ERROR!
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 17:56:30'!
totalPrice
	self shouldBeImplemented.! !
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 17:56:35' prior: 50872007!
totalPrice
	^0! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 17:56:37'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:57:14'!
test09TotalPriceOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart occurrencesOf: self itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:57:28' prior: 50872018!
test09TotalPriceOfEmptyCartIsZero

	| cart |
	
	cart := self createCart.
	
	self assert: (cart totalPrice ) = 0.! !

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 17:57:29'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:57:55'!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := self createCart.
	
	self assert: (cart totalPrice ) = 0.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:58:09' prior: 50872065!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 0.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:58:20' prior: 50872072!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 1000.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 17:58:21' prior: 50872080!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 1 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 100.! !

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 17:58:21'!
FAILURE!
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 17:59:26' prior: 50872011!
totalPrice

	| total |
	
	total := 0.
	
	items size = 1 ifTrue: [total := priceList at: (items at: 1)]
	
	^total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 17:59:33'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 17:59:33'!
ERROR!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 17:59:33'!
ERROR!
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 17:59:52' prior: 50872100!
totalPrice

	| total |
	
	total := 0.
	
	items size = 1 ifTrue: [total := total + priceList at: (items at: 1)].
	
	^total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 17:59:54'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 18:00:10'!
test10TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 200.! !

!testRun: #CartTest #test10TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/2/2021 18:00:10'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/2/2021 18:00:17'!
test11TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 200.! !

!methodRemoval: CartTest #test10TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/2/2021 18:00:17'!
test10TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart |
	
	cart := self createCart.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 200.!
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 18:01:16' prior: 50872139!
totalPrice

	| total |
	
	total := 0.
	
	items sum: [:anItem | total := total + (priceList at: anItem)] ifEmpty: [^0].
	
	^total.! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/2/2021 18:01:20'!
PASSED!
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 18:02:32' prior: 50872205!
totalPrice

	
	
	^items sum: [:anItem | priceList at: anItem] ifEmpty: [0].! !
!Cart methodsFor: 'total price' stamp: 'PhG 11/2/2021 18:02:36' prior: 50872248!
totalPrice

	^items sum: [:anItem | priceList at: anItem] ifEmpty: [0].! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/2/2021 18:02:38'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 18:03:05'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/2/2021 18:03:32'!
checkout: aCart withExpirationDate: anExpirationDate

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	^aCart totalPrice.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/2/2021 18:03:34'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 18:03:34'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/2/2021 18:03:34'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 18:03:34'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 18:03:34'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/2/2021 18:03:45'!
checkout: aCart withCardExpirationDate: anExpirationDate

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	^aCart totalPrice.! !

!methodRemoval: Cashier #checkout:withExpirationDate: stamp: 'PhG 11/2/2021 18:03:45'!
checkout: aCart withExpirationDate: anExpirationDate

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmpty].
	
	^aCart totalPrice.!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/2/2021 18:03:46'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 18:03:46'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/2/2021 18:03:46'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 18:03:46'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/2/2021 18:04:28'!
PASSED!

----QUIT----(2 November 2021 18:04:33) CuisUniversity-4532.image priorSource: 17256160!

----STARTUP---- (3 November 2021 07:51:02) as /Users/pgarrett/Documents/facultad/inge1/cuisUniversity/CuisUniversity-4532.image!

!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 07:53:59' prior: 50870107!
test01checkoutOnEmptyCartThrowsError

	| cart cashier creditCard today |
	
	cart := self createCart.
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmpty. ]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 07:54:11'!
ERROR!
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:54:21'!
prepareCheckoutFor: aCart payingWith: anUndefinedObject on: anUndefinedObject3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializePrepareCheckoutFor: aCart payingWith: anUndefinedObject on: anUndefinedObject3 ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:54:58' prior: 50872445!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	^self new initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:55:06' prior: 50872457!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:55:15' prior: 50872465!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 07:55:17'!
ERROR!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'PhG 11/3/2021 07:55:43'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList cart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'PhG 11/3/2021 07:55:43'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList cart creditCard'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'PhG 11/3/2021 07:55:44'!
Object subclass: #Cashier
	instanceVariableNames: 'priceList cart creditCard date'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'initialization' stamp: 'PhG 11/3/2021 07:55:44'!
initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate 
	self shouldBeImplemented.
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.! !
!Cashier methodsFor: 'initialization' stamp: 'PhG 11/3/2021 07:55:51' prior: 50872505!
initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate 
	
	cart := aCart.
	creditCard := aCreditCard.
	date := aDate.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 07:55:53'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 07:55:53'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 07:55:53'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 07:55:53'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 07:55:53'!
PASSED!
!Cashier methodsFor: 'error messages' stamp: 'PhG 11/3/2021 07:56:14'!
cartCanNotBeEmptyDescription

	^'Cart can not be empty'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 07:56:14' prior: 50871983!
checkout: aCart

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmptyDescription].
	
	^aCart totalPrice.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 07:56:14' prior: 50872322!
checkout: aCart withCardExpirationDate: anExpirationDate

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmptyDescription].
	
	^aCart totalPrice.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 07:56:14' prior: 50872428!
test01checkoutOnEmptyCartThrowsError

	| cart cashier creditCard today |
	
	cart := self createCart.
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self 
		should: [cashier checkout: cart ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmptyDescription. ]! !

!methodRemoval: Cashier #cartCanNotBeEmpty stamp: 'PhG 11/3/2021 07:56:14'!
cartCanNotBeEmpty

	^'Cart can not be empty'!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/3/2021 07:56:25' prior: 50872542!
checkout: aCart

	
	
	^aCart totalPrice.! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:56:36' prior: 50872473!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

"	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmptyDescription]."

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 07:56:57' prior: 50872557!
test01checkoutOnEmptyCartThrowsError

	| cart cashier creditCard today |
	
	cart := self createCart.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = cashier cartCanNotBeEmptyDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 07:57:12' prior: 50872590!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyDescription. ]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 07:57:15'!
FAILURE!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 07:57:34' prior: 50872603!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier canNotCreateTimeOfDayUsingSemiColonErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 07:57:39' prior: 50872619!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!Cashier methodsFor: 'error messages' stamp: 'PhG 11/3/2021 07:57:51'!
cartCanNotBeEmptyErrorDescription

	^'Cart can not be empty'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 07:57:51' prior: 50872549!
checkout: aCart withCardExpirationDate: anExpirationDate

	(aCart isEmpty) ifTrue: [self error: self cartCanNotBeEmptyErrorDescription].
	
	^aCart totalPrice.! !

!methodRemoval: Cashier #cartCanNotBeEmptyDescription stamp: 'PhG 11/3/2021 07:57:51'!
cartCanNotBeEmptyDescription

	^'Cart can not be empty'!
!Cashier class methodsFor: 'nil' stamp: 'PhG 11/3/2021 07:58:07'!
cartCanNotBeEmptyErrorDescription! !
!Cashier class methodsFor: 'error descriptions' stamp: 'PhG 11/3/2021 07:58:35' prior: 50872663!
cartCanNotBeEmptyErrorDescription

	^'Cart can not be empty'! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:59:01' prior: 50872580!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	(aCart isEmpty) ifTrue: [self error: Cashier cartCanNotBeEmptyDescription].

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:59:21'!
assertCartCanNotBeEmpty: aCart

	^ (aCart isEmpty) ifTrue: [self error: Cashier cartCanNotBeEmptyDescription]! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 07:59:21' prior: 50872673!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	self assertCartCanNotBeEmpty: aCart.

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !

!methodRemoval: Cashier #cartCanNotBeEmptyErrorDescription stamp: 'PhG 11/3/2021 08:00:03'!
cartCanNotBeEmptyErrorDescription

	^'Cart can not be empty'!

!methodRemoval: Cashier #checkout: stamp: 'PhG 11/3/2021 08:00:18'!
checkout: aCart

	
	
	^aCart totalPrice.!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/3/2021 08:00:26' prior: 50872651!
checkout: aCart withCardExpirationDate: anExpirationDate

	^aCart totalPrice.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:00:55'!
FAILURE!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:00:55'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:00:55'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:00:55'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:01:03'!
FAILURE!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:01:37'!
FAILURE!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:02:51'!
FAILURE!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:03:02'!
PASSED!
!Cashier class methodsFor: 'assertions' stamp: 'PhG 11/3/2021 08:04:06' prior: 50872683!
assertCartCanNotBeEmpty: aCart

	^ (aCart isEmpty) ifTrue: [self error: Cashier cartCanNotBeEmptyErrorDescription]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:04:10'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:04:10'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:04:10'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:04:10'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:04:11'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:04:11'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:04:11'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:04:11'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:04:13'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:04:13'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:04:13'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:04:13'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:04:14'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:04:14'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:04:14'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:04:14'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:04:28'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:04:28'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:04:28'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:04:28'!
PASSED!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:05:42'!
createCreditCardExpiring: anExpirationDate! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:06:03' prior: 50872818!
createCreditCardExpiring: anExpirationDate

	CreditCard withNumber: '0123456789123456'	 withExpirationDate: anExpirationDate.! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:06:46'!
currentMonthOfYear

	^GregorianMonthOfYear current.! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:06:58'!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:07:11' prior: 50872834!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:07:51' prior: 50872633!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	creditCard := self createCreditCardExpiring: (self ).
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:08:05'!
twoMonthsFrom: aMonthOfYear

	^aMonthOfYear next: (TimeUnits month with: 2).! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:08:47' prior: 50872846!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:08:51'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:08:51'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:08:51'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:08:52'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:08:52'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:09:11' prior: 50871882!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	cashier := Cashier new.
	
	cart add: self itemSoldByTheStore.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:09:48' prior: 50872900!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout: cart)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:10:26' prior: 50872914!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout: cart).
	! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:10:26'!
ERROR!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/3/2021 08:10:38'!
checkout: aCart 
	self shouldBeImplemented.! !
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/3/2021 08:10:47' prior: 50872949!
checkout: aCart 
	^aCart totalPrice.! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:10:48'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:10:48'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:10:48'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:10:48'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:10:48'!
PASSED!

!methodRemoval: Cashier #checkout:withCardExpirationDate: stamp: 'PhG 11/3/2021 08:11:07'!
checkout: aCart withCardExpirationDate: anExpirationDate

	^aCart totalPrice.!
!Cashier methodsFor: 'checkout' stamp: 'PhG 11/3/2021 08:11:33'!
checkout
	^cart totalPrice.! !

!methodRemoval: Cashier #checkout: stamp: 'PhG 11/3/2021 08:11:36'!
checkout: aCart 
	^aCart totalPrice.!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:11:44' prior: 50872930!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:11:45'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:11:45'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:11:45'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:11:45'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:11:45'!
ERROR!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:12:14' prior: 50871892!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

		| cart cashier creditCard today |
	
	cart := self createCart.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:12:16'!
ERROR!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:12:49' prior: 50873022!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

		| cart cashier creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:12:51'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:12:51'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:12:51'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:12:51'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:12:51'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:12:51'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:13:05'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:13:05'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:13:05'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:13:05'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:13:05'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:13:05'!
ERROR!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:13:29' prior: 50871905!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier today expiredDate |
	
	cart := self createCartWith: self priceListwithTwoItems.
	cashier := Cashier new.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	today := FixedGregorianDate today.
	
	expiredDate := today previous: (TimeUnits month with: 1).
	
	self assert: 160 equals: (cashier checkout: cart withCardExpirationDate: expiredDate)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:13:40' prior: 50873043!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:13:56' prior: 50873105!
test04checkoutWithExpiredCreditCardIsRejected

	| cart cashier creditCard today expiredDate |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsSince: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout: cart withCardExpirationDate: expiredDate)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:14:19' prior: 50873140!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsSince: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:14:34' prior: 50873160!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := self currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (self twoMonthsSince: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:14:36'!
FAILURE!
!Cashier class methodsFor: 'error descriptions' stamp: 'PhG 11/3/2021 08:15:08'!
creditCardCanNotBeExpiredErrorDescription

	^'Credit card can not be expired'! !

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:15:14'!
FAILURE!
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 08:15:54' prior: 50872690!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	self assertCartCanNotBeEmpty: aCart.
	(aCreditCard isExpiredOn: aDate) ifTrue: [self error: Cashier creditCardCanNotBeExpiredErrorDescription ].

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 08:16:45'!
assertCreditCard: aDate isNotExpiredOn: aCreditCard

	^ (aCreditCard isExpiredOn: aDate) ifTrue: [self error: Cashier creditCardCanNotBeExpiredErrorDescription ]! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 08:16:45' prior: 50873214!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	self assertCartCanNotBeEmpty: aCart.
	self assertCreditCard: aDate isNotExpiredOn: aCreditCard.

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !
!Cashier class methodsFor: 'instance creation' stamp: 'PhG 11/3/2021 08:17:04' prior: 50873235!
prepareCheckoutFor: aCart payingWith: aCreditCard on: aDate 

	self assertCartCanNotBeEmpty: aCart.
	self assertCreditCard: aCreditCard isNotExpiredOn: aDate.

	^self basicNew initializeCheckingOutFor: aCart payingWith: aCreditCard on: aDate ! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:17:12'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:17:12'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:17:12'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:17:12'!
FAILURE!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:17:21'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:17:21'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:17:21'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:17:21'!
FAILURE!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:17:24'!
ERROR!
!Cashier class methodsFor: 'assertions' stamp: 'PhG 11/3/2021 08:17:42' prior: 50873226!
assertCreditCard: aCreditCard isNotExpiredOn: aDate

	^ (aCreditCard isExpiredOn: aDate) ifTrue: [self error: Cashier creditCardCanNotBeExpiredErrorDescription ]! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:17:46'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:17:46'!
ERROR!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:17:46'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:17:46'!
FAILURE!
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:19:16' prior: 50872823!
createCreditCardExpiring: anExpirationDate

	^CreditCard withNumber: '0123456789123456'	 withExpirationDate: anExpirationDate.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:19:20'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:19:20'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:19:20'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:19:20'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:19:27'!
PASSED!

Object subclass: #TestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TestObjectsFactory category: 'TusLibros' stamp: 'PhG 11/3/2021 08:21:37'!
Object subclass: #TestObjectsFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TestObjectsFactory methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:21:50'!
currentMonthOfYear

	^GregorianMonthOfYear current.! !

TestCase subclass: #CreditCardTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCardTest category: 'TusLibros' stamp: 'PhG 11/3/2021 08:23:52'!
TestCase subclass: #CreditCardTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCardTest methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:24:29' overrides: 16896425!
initialize
	factory := TestObjectsFactory new.! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:24:55' prior: 50871847!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := factory currentMonthOfYear .
	twoMonthsToTheFuture := self twoMonthsFrom: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:24:56' prior: 50873435!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := factory currentMonthOfYear.
	twoMonthsToTheFuture := self twoMonthsFrom: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:24:57'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:25:07' prior: 50873451!
test03CreditCardWithExpirationDateInTheFutureIsNotExpired

	| creditCard currentMonthOfYear twoMonthsToTheFuture |
	
	currentMonthOfYear := factory currentMonthOfYear.
	twoMonthsToTheFuture := factory twoMonthsFrom: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToTheFuture.
	
	self deny: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:25:09'!
ERROR!
!TestObjectsFactory methodsFor: 'date' stamp: 'PhG 11/3/2021 08:25:21'!
twoMonthsFrom: aMonthOfYear

	^aMonthOfYear next: (TimeUnits month with: 2).! !
!TestObjectsFactory methodsFor: 'date' stamp: 'PhG 11/3/2021 08:25:32'!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).! !
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:25:51' prior: 50871602!
test04CreditCardWithExpirationDateInThePastIsExpired

	| creditCard currentMonthOfYear twoMonthsToThePast |
	
	currentMonthOfYear := factory currentMonthOfYear.
	twoMonthsToThePast := factory twoMonthsSince: currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: twoMonthsToThePast.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:25:53'!
PASSED!
!CreditCardTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:25:57' prior: 50871589!
test05CreditCardWithExpirationDateInThePresentIsNotExpired

	| creditCard currentMonthOfYear |
	
	currentMonthOfYear := factory currentMonthOfYear.

	creditCard := CreditCard withNumber: '0123456789123456'	 withExpirationDate: currentMonthOfYear.
	
	self assert: (creditCard isExpiredOn: currentMonthOfYear).! !

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:25:58'!
PASSED!

!methodRemoval: CreditCardTest #currentMonthOfYear stamp: 'PhG 11/3/2021 08:26:08'!
currentMonthOfYear

	^GregorianMonthOfYear current.!

!methodRemoval: CreditCardTest #twoMonthsFrom: stamp: 'PhG 11/3/2021 08:26:08'!
twoMonthsFrom: aMonthOfYear

	^aMonthOfYear next: (TimeUnits month with: 2).!

!methodRemoval: CreditCardTest #twoMonthsSince: stamp: 'PhG 11/3/2021 08:26:08'!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:26:14'!
ERROR!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:26:14'!
ERROR!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:26:14'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:26:14'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:26:14'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:26:26'!
ERROR!
!CreditCardTest methodsFor: 'assertions' stamp: 'PhG 11/3/2021 08:26:45' prior: 50871742!
assertCreditCardMustContain16DigitsForCardNumber: aCardNumber

	| twoMonthsToTheFuture |

	twoMonthsToTheFuture := factory twoMonthsFrom: factory currentMonthOfYear.
	
	self 
		should: [CreditCard withNumber: aCardNumber withExpirationDate: twoMonthsToTheFuture ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = CreditCard creditCardMustContain16Digits. ]! !

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:26:46'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:26:46'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:26:46'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:26:46'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:26:46'!
PASSED!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'PhG 11/3/2021 08:27:37'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:27:35' overrides: 16896425!
initialize

	factory := TestObjectsFactory new.! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:27:57' prior: 50872866!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	today := factory currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (factory twoMonthsFrom: today).
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:28:10' prior: 50872988!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := factory currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (factory twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:28:15' prior: 50873122!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (factory twoMonthsFrom: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:28:19' prior: 50873180!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := self createCreditCardExpiring: (factory twoMonthsSince: today).
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:28:20'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:28:20'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:28:20'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:28:20'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:28:20'!
PASSED!
!TestObjectsFactory methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:29:55'!
createCreditCardExpiringTwoMonthsFrom: anExpirationDate

	^self createCreditCardExpiring: (self twoMonthsSince: anExpirationDate).! !
!TestObjectsFactory methodsFor: 'credit card' stamp: 'PhG 11/3/2021 08:30:16'!
createCreditCardExpiring: anExpirationDate

	^CreditCard withNumber: '0123456789123456'	 withExpirationDate: anExpirationDate.! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:30:40' prior: 50873681!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCart.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:30:53' prior: 50873698!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: self itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:30:58' prior: 50873714!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:31:06' prior: 50873732!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: self itemSoldByTheStore.
	cart add: self otherItemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !
!TestObjectsFactory methodsFor: 'credit card' stamp: 'PhG 11/3/2021 08:31:17'!
createCreditCardExpiringTwoMonthsSince: anExpirationDate

	^self createCreditCardExpiring: (self twoMonthsSince: anExpirationDate).! !
!TestObjectsFactory methodsFor: 'credit card' stamp: 'PhG 11/3/2021 08:31:22' prior: 50873770!
createCreditCardExpiringTwoMonthsFrom: anExpirationDate

	^self createCreditCardExpiring: (self twoMonthsFrom: anExpirationDate).! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:31:41'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:31:41'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:31:41'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:31:41'!
PASSED!

!methodRemoval: CashierTest #createCreditCardExpiring: stamp: 'PhG 11/3/2021 08:31:58'!
createCreditCardExpiring: anExpirationDate

	^CreditCard withNumber: '0123456789123456'	 withExpirationDate: anExpirationDate.!

!methodRemoval: CashierTest #currentMonthOfYear stamp: 'PhG 11/3/2021 08:32:00'!
currentMonthOfYear

	^GregorianMonthOfYear current.!

!methodRemoval: CashierTest #twoMonthsFrom: stamp: 'PhG 11/3/2021 08:32:05'!
twoMonthsFrom: aMonthOfYear

	^aMonthOfYear next: (TimeUnits month with: 2).!

!methodRemoval: CashierTest #twoMonthsSince: stamp: 'PhG 11/3/2021 08:32:07'!
twoMonthsSince: aMonthOfYear

	^aMonthOfYear previous: (TimeUnits month with: 2).!
!TestObjectsFactory methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:32:23'!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	priceList add: (self otherItemSoldByTheStore)-> 60.
	^priceList.! !
!TestObjectsFactory methodsFor: 'items' stamp: 'PhG 11/3/2021 08:32:50'!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	^priceList.! !
!TestObjectsFactory methodsFor: 'items' stamp: 'PhG 11/3/2021 08:33:01'!
itemSoldByTheStore
	
	^ 'validBook'! !
!TestObjectsFactory methodsFor: 'items' stamp: 'PhG 11/3/2021 08:33:11'!
otherItemSoldByTheStore
	
	^ 'otherValidBook'! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:33:24' prior: 50873801!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCart.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: factory itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:33:32' prior: 50873817!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: factory itemSoldByTheStore.
	cart add: factory otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:33:39' prior: 50873835!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	cart add: factory otherItemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:34:27' prior: 50873964!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWith: self priceListwithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !
!TestObjectsFactory methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:35:12'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CartTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:35:38'!
createCartWithDefaultPriceList
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!TestObjectsFactory methodsFor: 'cart' stamp: 'PhG 11/3/2021 08:35:38'!
createCartWithDefaultPriceList
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CashierTest methodsFor: 'support' stamp: 'PhG 11/3/2021 08:35:38'!
createCartWithDefaultPriceList
	
	^Cart acceptingItemsOf: self defaultPriceList! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:38' prior: 50870619!
test06CartRemembersAddedItems

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	cart add: self itemSoldByTheStore.
	self assert: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50870014!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50870703!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	cart add: self itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50873930!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := self createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: factory itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50869994!
test01NewCartsAreCreatedEmpty

	self assert: self createCartWithDefaultPriceList isEmpty! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50873784!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := self createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50870610!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart occurrencesOf: self itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50872188!
test11TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	cart add: 2 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 200.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50872027!
test09TotalPriceOfEmptyCartIsZero

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self assert: (cart totalPrice ) = 0.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50870695!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self deny: (cart includes: self itemSoldByTheStore)! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50872088!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	cart add: 1 of: self itemSoldByTheStore.
	self assert: (cart totalPrice ) = 100.! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50870633!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 0 of: self itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:35:39' prior: 50869972!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!methodRemoval: CartTest #createCart stamp: 'PhG 11/3/2021 08:35:39'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList!

!methodRemoval: TestObjectsFactory #createCart stamp: 'PhG 11/3/2021 08:35:39'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList!

!methodRemoval: CashierTest #createCart stamp: 'PhG 11/3/2021 08:35:39'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceList!
!TestObjectsFactory methodsFor: 'cart' stamp: 'PhG 11/3/2021 08:35:53'!
createCartWith: aPriceList
	
	^Cart acceptingItemsOf: aPriceList! !
!TestObjectsFactory methodsFor: 'cart' stamp: 'PhG 11/3/2021 08:36:13' prior: 50874013!
createCartWithDefaultPriceList
	
	^self createCartWith: self defaultPriceList! !

!methodRemoval: CashierTest #createCartWithDefaultPriceList stamp: 'PhG 11/3/2021 08:36:26'!
createCartWithDefaultPriceList
	
	^Cart acceptingItemsOf: self defaultPriceList!

!methodRemoval: CashierTest #defaultPriceList stamp: 'PhG 11/3/2021 08:36:59'!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	^priceList.!

!methodRemoval: CashierTest #itemSoldByTheStore stamp: 'PhG 11/3/2021 08:37:02'!
itemSoldByTheStore
	
	^ 'validBook'!

!methodRemoval: CashierTest #otherItemSoldByTheStore stamp: 'PhG 11/3/2021 08:37:04'!
otherItemSoldByTheStore
	
	^ 'otherValidBook'!

!methodRemoval: CashierTest #priceListwithTwoItems stamp: 'PhG 11/3/2021 08:37:15'!
priceListwithTwoItems

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	priceList add: (self otherItemSoldByTheStore)-> 60.
	^priceList.!

!methodRemoval: CashierTest #createCartWith: stamp: 'PhG 11/3/2021 08:37:21'!
createCartWith: aPriceList
	
	^Cart acceptingItemsOf: aPriceList!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:37:31' prior: 50874079!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier cartCanNotBeEmptyErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:37:34' prior: 50874056!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: factory itemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:37:49' prior: 50873946!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today |
	
	cart := factory createCartWithPriceListWithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	cart add: factory itemSoldByTheStore.
	cart add: factory otherItemSoldByTheStore.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 160 equals: (cashier checkout)
	! !
!TestObjectsFactory methodsFor: 'cart' stamp: 'PhG 11/3/2021 08:38:01'!
createCartWithPriceListWithTwoItems
	
	^self createCartWith: self priceListwithTwoItems ! !
!TestObjectsFactory methodsFor: 'cart' stamp: 'PhG 11/3/2021 08:38:04' prior: 50874276!
createCartWithPriceListWithTwoItems
	
	^self createCartWith: self priceListwithTwoItems.! !

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:38:07'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:38:07'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:38:07'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:38:07'!
ERROR!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:38:07'!
ERROR!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:38:19' prior: 50873985!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := self createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:38:22' prior: 50874306!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]
	! !

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:38:24'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:38:31'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:38:31'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:38:31'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:38:31'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:38:33'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:38:33'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:38:33'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:38:33'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:38:33'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:39:06' prior: 50874241!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today product |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	product := factory itemSoldByTheStore.
	
	cart add: product.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:39:09' prior: 50874382!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today item |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	item := factory itemSoldByTheStore.
	
	cart add: item.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: 100 equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:39:18' prior: 50874399!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier creditCard today item |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	item := factory itemSoldByTheStore.
	
	cart add: item.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: (factory priceOf: item) equals: (cashier checkout).
	! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:39:20'!
ERROR!
!TestObjectsFactory methodsFor: 'price list' stamp: 'PhG 11/3/2021 08:39:39'!
priceOf: aString 
	self shouldBeImplemented.! !
!TestObjectsFactory methodsFor: 'price list' stamp: 'PhG 11/3/2021 08:40:23' prior: 50874437!
priceOf: anItem 
	^self priceListwithTwoItems at: anItem.! !

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:40:24'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:40:24'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:40:24'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:40:24'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:40:24'!
PASSED!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:41:11' prior: 50874258!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := Cashier prepareCheckoutFor: cart payingWith: creditCard on: today.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:42:20'!
cashierCheckingOutFor: aCart! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:43:04'!
cashierCheckingOutWithValidCardFor: aCart! !

!methodRemoval: CashierTest #cashierCheckingOutFor: stamp: 'PhG 11/3/2021 08:43:07'!
cashierCheckingOutFor: aCart!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:43:23' prior: 50874490!
cashierCheckingOutWithValidCardFor: aCart

	| creditCard today |
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:43:28' prior: 50874499!
cashierCheckingOutWithValidCardFor: aCart

	| creditCard today |
	
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'PhG 11/3/2021 08:43:48' prior: 50874508!
cashierCheckingOutWithValidCardFor: aCart

	| creditCard today |
	
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	^Cashier prepareCheckoutFor: aCart payingWith: creditCard on: today.! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:44:23' prior: 50874416!
test02checkoutTotalOnCartWithOneProductIsProductPrice

	| cart cashier item |
	
	cart := factory createCartWithDefaultPriceList.
	item := factory itemSoldByTheStore.
	
	cart add: item.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) equals: (cashier checkout).
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:44:45' prior: 50874465!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier creditCard today item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:44:53' prior: 50874541!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:45:01' prior: 50874562!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout)
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:45:06' prior: 50874579!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout)! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:45:07' prior: 50874596!
test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum

	| cart cashier item otherItem |
	
	cart := factory createCartWithPriceListWithTwoItems.
	item := factory itemSoldByTheStore.
	otherItem := factory otherItemSoldByTheStore.

	cart add: item.
	cart add: otherItem.
	
	cashier := self cashierCheckingOutWithValidCardFor: cart.
	
	self assert: (factory priceOf: item) + (factory priceOf: otherItem) equals: (cashier checkout).! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:46:43'!
assertCheckingOut: creditCard payingWith: today onDate: cart

	^ self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:46:43' prior: 50874325!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self assertCheckingOut: creditCard payingWith: today onDate: cart
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:47:07'!
assertCheckingOut: creditCard payingWith: today onDate: cart willFailWith: anErrorDescription

	^ self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = anErrorDescription. ]! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:47:17' prior: 50874641!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self assertCheckingOut: creditCard payingWith: today onDate: cart willFailWith: Cashier creditCardCanNotBeExpiredErrorDescription.
	! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:47:21' prior: 50874668!
test04checkoutWithExpiredCreditCardIsRejected

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self assertCheckingOut: creditCard payingWith: today onDate: cart willFailWith: (Cashier creditCardCanNotBeExpiredErrorDescription).
	! !

!methodRemoval: CashierTest #assertCheckingOut:payingWith:onDate: stamp: 'PhG 11/3/2021 08:47:24'!
assertCheckingOut: creditCard payingWith: today onDate: cart

	^ self 
		should: [ Cashier prepareCheckoutFor: cart payingWith: creditCard on: today ]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: anError messageText = Cashier creditCardCanNotBeExpiredErrorDescription. ]!
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:47:55' prior: 50874224!
test01checkoutOnEmptyCartThrowsError

	| cart creditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	creditCard := factory createCreditCardExpiringTwoMonthsFrom: today.
	
	self assertCheckingOut: creditCard payingWith: today onDate: cart willFailWith: (Cashier cartCanNotBeEmptyErrorDescription).! !
!CashierTest methodsFor: 'checkout tests' stamp: 'PhG 11/3/2021 08:48:07' prior: 50874684!
test04checkoutWithExpiredCreditCardIsRejected

	| cart expiredCreditCard today |
	
	cart := factory createCartWithDefaultPriceList.
	today := factory currentMonthOfYear.
	expiredCreditCard := factory createCreditCardExpiringTwoMonthsSince: today.
	
	cart add: factory itemSoldByTheStore.
	
	self assertCheckingOut: expiredCreditCard payingWith: today onDate: cart willFailWith: (Cashier creditCardCanNotBeExpiredErrorDescription).
	! !

!methodRemoval: CartTest #defaultCatalog stamp: 'PhG 11/3/2021 08:50:06'!
defaultCatalog
	
	^ Array with: self itemSoldByTheStore!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'PhG 11/3/2021 08:50:22'!
TestCase subclass: #CartTest
	instanceVariableNames: 'factory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:50:20' prior: 50874073!
test01NewCartsAreCreatedEmpty

	self assert: factory createCartWithDefaultPriceList isEmpty! !
!CartTest methodsFor: 'nil' stamp: 'PhG 11/3/2021 08:50:34' overrides: 16896425!
initialize
	
	factory := TestObjectsFactory new.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:50:49' prior: 50874154!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:50:57' prior: 50874764!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [ cart add: factory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!TestObjectsFactory methodsFor: 'item' stamp: 'PhG 11/3/2021 08:51:19'!
itemNotSoldByTheStore
	
	^'invalidBook'! !

!methodRemoval: CartTest #itemSoldByTheStore stamp: 'PhG 11/3/2021 08:51:24'!
itemSoldByTheStore
	
	^ 'validBook'!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'PhG 11/3/2021 08:51:27'!
itemNotSellByTheStore
	
	^'invalidBook'!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:51:35' prior: 50874777!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [ cart add: factory itemNotSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:51:42' prior: 50874047!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: factory itemSoldByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:51:46' prior: 50874140!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := self createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 0 of: factory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:51:49' prior: 50874825!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 0 of: factory itemSoldByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:51:56' prior: 50874033!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 2 of: factory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:03' prior: 50874024!
test06CartRemembersAddedItems

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: factory itemSoldByTheStore.
	self assert: (cart includes: factory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:08' prior: 50874123!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self deny: (cart includes: factory itemSoldByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:14' prior: 50874096!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: 2 of: factory itemSoldByTheStore.
	self assert: (cart occurrencesOf: factory itemSoldByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:17' prior: 50874115!
test09TotalPriceOfEmptyCartIsZero

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self assert: (cart totalPrice ) = 0.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:22' prior: 50874131!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: 1 of: factory itemSoldByTheStore.
	self assert: (cart totalPrice) = 100.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:25' prior: 50874894!
test09TotalPriceOfEmptyCartIsZero

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self assert: (cart totalPrice) = 0.! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:52:48' prior: 50874901!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: 1 of: factory itemSoldByTheStore.
	self assert: (cart totalPrice) = (factory priceOf: factory itemSoldByTheStore).! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:53:15' prior: 50874106!
test11TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart item |
	
	cart := factory createCartWithDefaultPriceList.
	item := factory itemSoldByTheStore.
	cart add: 2 of: item.
	self assert: (cart totalPrice ) = (factory priceOf: item).! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:53:18' prior: 50874927!
test11TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart item |
	
	cart := factory createCartWithDefaultPriceList.
	item := factory itemSoldByTheStore.

	cart add: 2 of: item.

	self assert: (cart totalPrice ) = (factory priceOf: item).! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:53:33' prior: 50874917!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart item |
	
	cart := factory createCartWithDefaultPriceList.
	
	cart add: 1 of: factory itemSoldByTheStore.

	self assert: (cart totalPrice ) = (factory priceOf: item).! !
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:53:44' prior: 50874947!
test10TotalPriceOfCartWithItemIsItemPrice

	| cart item |
	
	cart := factory createCartWithDefaultPriceList.
	item := 	factory itemSoldByTheStore.

	cart add: 1 of: item.

	self assert: (cart totalPrice ) = (factory priceOf: item).! !

!methodRemoval: CartTest #createCartWithDefaultPriceList stamp: 'PhG 11/3/2021 08:53:49'!
createCartWithDefaultPriceList
	
	^Cart acceptingItemsOf: self defaultPriceList!

!methodRemoval: CartTest #defaultPriceList stamp: 'PhG 11/3/2021 08:53:50'!
defaultPriceList

	| priceList |
	
	priceList := Dictionary new.
	priceList add: (self itemSoldByTheStore)-> 100.
	^priceList.!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/3/2021 08:53:53'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/3/2021 08:53:53'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:53:53'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:53:58' prior: 50874853!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := factory createCartWithDefaultPriceList.
	
	self 
		should: [cart add: 2 of: factory itemNotSoldByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/3/2021 08:54:01'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:54:01'!
FAILURE!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:54:01'!
FAILURE!
!CartTest methodsFor: 'tests' stamp: 'PhG 11/3/2021 08:54:21' prior: 50874937!
test11TotalPriceOfCartWithItemsIsAddedItemsPrice

	| cart item |
	
	cart := factory createCartWithDefaultPriceList.
	item := factory itemSoldByTheStore.

	cart add: 2 of: item.

	self assert: (cart totalPrice ) = ((factory priceOf: item)*2).! !

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:54:23'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test09TotalPriceOfEmptyCartIsZero stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test10TotalPriceOfCartWithItemIsItemPrice stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CartTest #test11TotalPriceOfCartWithItemsIsAddedItemsPrice stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CashierTest #test01checkoutOnEmptyCartThrowsError stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CashierTest #test02checkoutTotalOnCartWithOneProductIsProductPrice stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CashierTest #test03checkoutTotalOnCartWithManyProductsIsProductsPriceSum stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CashierTest #test04checkoutWithExpiredCreditCardIsRejected stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CreditCardTest #test01CreditCardWithLessThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CreditCardTest #test02CreditCardWithMoreThan16DigitsCanNotBeInstantiated stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CreditCardTest #test03CreditCardWithExpirationDateInTheFutureIsNotExpired stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CreditCardTest #test04CreditCardWithExpirationDateInThePastIsExpired stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

!testRun: #CreditCardTest #test05CreditCardWithExpirationDateInThePresentIsNotExpired stamp: 'PhG 11/3/2021 08:54:25'!
PASSED!

----QUIT----(3 November 2021 08:59:54) CuisUniversity-4532.image priorSource: 17304625!